import {
  __commonJS
} from "./chunk-FGLTSQVH.js";

// node_modules/type/value/is.js
var require_is = __commonJS({
  "node_modules/type/value/is.js"(exports, module) {
    "use strict";
    var _undefined = void 0;
    module.exports = function(value) {
      return value !== _undefined && value !== null;
    };
  }
});

// node_modules/type/object/is.js
var require_is2 = __commonJS({
  "node_modules/type/object/is.js"(exports, module) {
    "use strict";
    var isValue = require_is();
    var possibleTypes = { "object": true, "function": true, "undefined": true };
    module.exports = function(value) {
      if (!isValue(value))
        return false;
      return hasOwnProperty.call(possibleTypes, typeof value);
    };
  }
});

// node_modules/type/prototype/is.js
var require_is3 = __commonJS({
  "node_modules/type/prototype/is.js"(exports, module) {
    "use strict";
    var isObject = require_is2();
    module.exports = function(value) {
      if (!isObject(value))
        return false;
      try {
        if (!value.constructor)
          return false;
        return value.constructor.prototype === value;
      } catch (error) {
        return false;
      }
    };
  }
});

// node_modules/type/function/is.js
var require_is4 = __commonJS({
  "node_modules/type/function/is.js"(exports, module) {
    "use strict";
    var isPrototype = require_is3();
    module.exports = function(value) {
      if (typeof value !== "function")
        return false;
      if (!hasOwnProperty.call(value, "length"))
        return false;
      try {
        if (typeof value.length !== "number")
          return false;
        if (typeof value.call !== "function")
          return false;
        if (typeof value.apply !== "function")
          return false;
      } catch (error) {
        return false;
      }
      return !isPrototype(value);
    };
  }
});

// node_modules/type/plain-function/is.js
var require_is5 = __commonJS({
  "node_modules/type/plain-function/is.js"(exports, module) {
    "use strict";
    var isFunction = require_is4();
    var classRe = /^\s*class[\s{/}]/;
    var functionToString = Function.prototype.toString;
    module.exports = function(value) {
      if (!isFunction(value))
        return false;
      if (classRe.test(functionToString.call(value)))
        return false;
      return true;
    };
  }
});

// node_modules/es5-ext/object/assign/is-implemented.js
var require_is_implemented = __commonJS({
  "node_modules/es5-ext/object/assign/is-implemented.js"(exports, module) {
    "use strict";
    module.exports = function() {
      var assign = Object.assign, obj;
      if (typeof assign !== "function")
        return false;
      obj = { foo: "raz" };
      assign(obj, { bar: "dwa" }, { trzy: "trzy" });
      return obj.foo + obj.bar + obj.trzy === "razdwatrzy";
    };
  }
});

// node_modules/es5-ext/object/keys/is-implemented.js
var require_is_implemented2 = __commonJS({
  "node_modules/es5-ext/object/keys/is-implemented.js"(exports, module) {
    "use strict";
    module.exports = function() {
      try {
        Object.keys("primitive");
        return true;
      } catch (e) {
        return false;
      }
    };
  }
});

// node_modules/es5-ext/function/noop.js
var require_noop = __commonJS({
  "node_modules/es5-ext/function/noop.js"(exports, module) {
    "use strict";
    module.exports = function() {
    };
  }
});

// node_modules/es5-ext/object/is-value.js
var require_is_value = __commonJS({
  "node_modules/es5-ext/object/is-value.js"(exports, module) {
    "use strict";
    var _undefined = require_noop()();
    module.exports = function(val) {
      return val !== _undefined && val !== null;
    };
  }
});

// node_modules/es5-ext/object/keys/shim.js
var require_shim = __commonJS({
  "node_modules/es5-ext/object/keys/shim.js"(exports, module) {
    "use strict";
    var isValue = require_is_value();
    var keys = Object.keys;
    module.exports = function(object) {
      return keys(isValue(object) ? Object(object) : object);
    };
  }
});

// node_modules/es5-ext/object/keys/index.js
var require_keys = __commonJS({
  "node_modules/es5-ext/object/keys/index.js"(exports, module) {
    "use strict";
    module.exports = require_is_implemented2()() ? Object.keys : require_shim();
  }
});

// node_modules/es5-ext/object/valid-value.js
var require_valid_value = __commonJS({
  "node_modules/es5-ext/object/valid-value.js"(exports, module) {
    "use strict";
    var isValue = require_is_value();
    module.exports = function(value) {
      if (!isValue(value))
        throw new TypeError("Cannot use null or undefined");
      return value;
    };
  }
});

// node_modules/es5-ext/object/assign/shim.js
var require_shim2 = __commonJS({
  "node_modules/es5-ext/object/assign/shim.js"(exports, module) {
    "use strict";
    var keys = require_keys();
    var value = require_valid_value();
    var max = Math.max;
    module.exports = function(dest, src) {
      var error, i, length = max(arguments.length, 2), assign;
      dest = Object(value(dest));
      assign = function(key) {
        try {
          dest[key] = src[key];
        } catch (e) {
          if (!error)
            error = e;
        }
      };
      for (i = 1; i < length; ++i) {
        src = arguments[i];
        keys(src).forEach(assign);
      }
      if (error !== void 0)
        throw error;
      return dest;
    };
  }
});

// node_modules/es5-ext/object/assign/index.js
var require_assign = __commonJS({
  "node_modules/es5-ext/object/assign/index.js"(exports, module) {
    "use strict";
    module.exports = require_is_implemented()() ? Object.assign : require_shim2();
  }
});

// node_modules/es5-ext/object/normalize-options.js
var require_normalize_options = __commonJS({
  "node_modules/es5-ext/object/normalize-options.js"(exports, module) {
    "use strict";
    var isValue = require_is_value();
    var forEach = Array.prototype.forEach;
    var create = Object.create;
    var process2 = function(src, obj) {
      var key;
      for (key in src)
        obj[key] = src[key];
    };
    module.exports = function(opts1) {
      var result = create(null);
      forEach.call(arguments, function(options) {
        if (!isValue(options))
          return;
        process2(Object(options), result);
      });
      return result;
    };
  }
});

// node_modules/es5-ext/string/#/contains/is-implemented.js
var require_is_implemented3 = __commonJS({
  "node_modules/es5-ext/string/#/contains/is-implemented.js"(exports, module) {
    "use strict";
    var str = "razdwatrzy";
    module.exports = function() {
      if (typeof str.contains !== "function")
        return false;
      return str.contains("dwa") === true && str.contains("foo") === false;
    };
  }
});

// node_modules/es5-ext/string/#/contains/shim.js
var require_shim3 = __commonJS({
  "node_modules/es5-ext/string/#/contains/shim.js"(exports, module) {
    "use strict";
    var indexOf = String.prototype.indexOf;
    module.exports = function(searchString) {
      return indexOf.call(this, searchString, arguments[1]) > -1;
    };
  }
});

// node_modules/es5-ext/string/#/contains/index.js
var require_contains = __commonJS({
  "node_modules/es5-ext/string/#/contains/index.js"(exports, module) {
    "use strict";
    module.exports = require_is_implemented3()() ? String.prototype.contains : require_shim3();
  }
});

// node_modules/d/index.js
var require_d = __commonJS({
  "node_modules/d/index.js"(exports, module) {
    "use strict";
    var isValue = require_is();
    var isPlainFunction = require_is5();
    var assign = require_assign();
    var normalizeOpts = require_normalize_options();
    var contains = require_contains();
    var d = module.exports = function(dscr, value) {
      var c, e, w, options, desc;
      if (arguments.length < 2 || typeof dscr !== "string") {
        options = value;
        value = dscr;
        dscr = null;
      } else {
        options = arguments[2];
      }
      if (isValue(dscr)) {
        c = contains.call(dscr, "c");
        e = contains.call(dscr, "e");
        w = contains.call(dscr, "w");
      } else {
        c = w = true;
        e = false;
      }
      desc = { value, configurable: c, enumerable: e, writable: w };
      return !options ? desc : assign(normalizeOpts(options), desc);
    };
    d.gs = function(dscr, get, set) {
      var c, e, options, desc;
      if (typeof dscr !== "string") {
        options = set;
        set = get;
        get = dscr;
        dscr = null;
      } else {
        options = arguments[3];
      }
      if (!isValue(get)) {
        get = void 0;
      } else if (!isPlainFunction(get)) {
        options = get;
        get = set = void 0;
      } else if (!isValue(set)) {
        set = void 0;
      } else if (!isPlainFunction(set)) {
        options = set;
        set = void 0;
      }
      if (isValue(dscr)) {
        c = contains.call(dscr, "c");
        e = contains.call(dscr, "e");
      } else {
        c = true;
        e = false;
      }
      desc = { get, set, configurable: c, enumerable: e };
      return !options ? desc : assign(normalizeOpts(options), desc);
    };
  }
});

// node_modules/es5-ext/object/valid-callable.js
var require_valid_callable = __commonJS({
  "node_modules/es5-ext/object/valid-callable.js"(exports, module) {
    "use strict";
    module.exports = function(fn) {
      if (typeof fn !== "function")
        throw new TypeError(fn + " is not a function");
      return fn;
    };
  }
});

// node_modules/es5-ext/object/_iterate.js
var require_iterate = __commonJS({
  "node_modules/es5-ext/object/_iterate.js"(exports, module) {
    "use strict";
    var callable = require_valid_callable();
    var value = require_valid_value();
    var bind = Function.prototype.bind;
    var call = Function.prototype.call;
    var keys = Object.keys;
    var objPropertyIsEnumerable = Object.prototype.propertyIsEnumerable;
    module.exports = function(method, defVal) {
      return function(obj, cb) {
        var list, thisArg = arguments[2], compareFn = arguments[3];
        obj = Object(value(obj));
        callable(cb);
        list = keys(obj);
        if (compareFn) {
          list.sort(typeof compareFn === "function" ? bind.call(compareFn, obj) : void 0);
        }
        if (typeof method !== "function")
          method = list[method];
        return call.call(method, list, function(key, index) {
          if (!objPropertyIsEnumerable.call(obj, key))
            return defVal;
          return call.call(cb, thisArg, obj[key], key, obj, index);
        });
      };
    };
  }
});

// node_modules/es5-ext/object/for-each.js
var require_for_each = __commonJS({
  "node_modules/es5-ext/object/for-each.js"(exports, module) {
    "use strict";
    module.exports = require_iterate()("forEach");
  }
});

// node_modules/es5-ext/object/map.js
var require_map = __commonJS({
  "node_modules/es5-ext/object/map.js"(exports, module) {
    "use strict";
    var callable = require_valid_callable();
    var forEach = require_for_each();
    var call = Function.prototype.call;
    module.exports = function(obj, cb) {
      var result = {}, thisArg = arguments[2];
      callable(cb);
      forEach(obj, function(value, key, targetObj, index) {
        result[key] = call.call(cb, thisArg, value, key, targetObj, index);
      });
      return result;
    };
  }
});

// node_modules/es5-ext/object/primitive-set.js
var require_primitive_set = __commonJS({
  "node_modules/es5-ext/object/primitive-set.js"(exports, module) {
    "use strict";
    var forEach = Array.prototype.forEach;
    var create = Object.create;
    module.exports = function(arg) {
      var set = create(null);
      forEach.call(arguments, function(name) {
        set[name] = true;
      });
      return set;
    };
  }
});

// node_modules/es5-ext/object/set-prototype-of/is-implemented.js
var require_is_implemented4 = __commonJS({
  "node_modules/es5-ext/object/set-prototype-of/is-implemented.js"(exports, module) {
    "use strict";
    var create = Object.create;
    var getPrototypeOf = Object.getPrototypeOf;
    var plainObject = {};
    module.exports = function() {
      var setPrototypeOf = Object.setPrototypeOf, customCreate = arguments[0] || create;
      if (typeof setPrototypeOf !== "function")
        return false;
      return getPrototypeOf(setPrototypeOf(customCreate(null), plainObject)) === plainObject;
    };
  }
});

// node_modules/es5-ext/object/is-object.js
var require_is_object = __commonJS({
  "node_modules/es5-ext/object/is-object.js"(exports, module) {
    "use strict";
    var isValue = require_is_value();
    var map = { function: true, object: true };
    module.exports = function(value) {
      return isValue(value) && map[typeof value] || false;
    };
  }
});

// node_modules/es5-ext/object/create.js
var require_create = __commonJS({
  "node_modules/es5-ext/object/create.js"(exports, module) {
    "use strict";
    var create = Object.create;
    var shim;
    if (!require_is_implemented4()()) {
      shim = require_shim4();
    }
    module.exports = function() {
      var nullObject, polyProps, desc;
      if (!shim)
        return create;
      if (shim.level !== 1)
        return create;
      nullObject = {};
      polyProps = {};
      desc = { configurable: false, enumerable: false, writable: true, value: void 0 };
      Object.getOwnPropertyNames(Object.prototype).forEach(function(name) {
        if (name === "__proto__") {
          polyProps[name] = {
            configurable: true,
            enumerable: false,
            writable: true,
            value: void 0
          };
          return;
        }
        polyProps[name] = desc;
      });
      Object.defineProperties(nullObject, polyProps);
      Object.defineProperty(shim, "nullPolyfill", {
        configurable: false,
        enumerable: false,
        writable: false,
        value: nullObject
      });
      return function(prototype, props) {
        return create(prototype === null ? nullObject : prototype, props);
      };
    }();
  }
});

// node_modules/es5-ext/object/set-prototype-of/shim.js
var require_shim4 = __commonJS({
  "node_modules/es5-ext/object/set-prototype-of/shim.js"(exports, module) {
    "use strict";
    var isObject = require_is_object();
    var value = require_valid_value();
    var objIsPrototypeOf = Object.prototype.isPrototypeOf;
    var defineProperty = Object.defineProperty;
    var nullDesc = { configurable: true, enumerable: false, writable: true, value: void 0 };
    var validate;
    validate = function(obj, prototype) {
      value(obj);
      if (prototype === null || isObject(prototype))
        return obj;
      throw new TypeError("Prototype must be null or an object");
    };
    module.exports = function(status) {
      var fn, set;
      if (!status)
        return null;
      if (status.level === 2) {
        if (status.set) {
          set = status.set;
          fn = function(obj, prototype) {
            set.call(validate(obj, prototype), prototype);
            return obj;
          };
        } else {
          fn = function(obj, prototype) {
            validate(obj, prototype).__proto__ = prototype;
            return obj;
          };
        }
      } else {
        fn = function self2(obj, prototype) {
          var isNullBase;
          validate(obj, prototype);
          isNullBase = objIsPrototypeOf.call(self2.nullPolyfill, obj);
          if (isNullBase)
            delete self2.nullPolyfill.__proto__;
          if (prototype === null)
            prototype = self2.nullPolyfill;
          obj.__proto__ = prototype;
          if (isNullBase)
            defineProperty(self2.nullPolyfill, "__proto__", nullDesc);
          return obj;
        };
      }
      return Object.defineProperty(fn, "level", {
        configurable: false,
        enumerable: false,
        writable: false,
        value: status.level
      });
    }(
      function() {
        var tmpObj1 = /* @__PURE__ */ Object.create(null), tmpObj2 = {}, set, desc = Object.getOwnPropertyDescriptor(Object.prototype, "__proto__");
        if (desc) {
          try {
            set = desc.set;
            set.call(tmpObj1, tmpObj2);
          } catch (ignore) {
          }
          if (Object.getPrototypeOf(tmpObj1) === tmpObj2)
            return { set, level: 2 };
        }
        tmpObj1.__proto__ = tmpObj2;
        if (Object.getPrototypeOf(tmpObj1) === tmpObj2)
          return { level: 2 };
        tmpObj1 = {};
        tmpObj1.__proto__ = tmpObj2;
        if (Object.getPrototypeOf(tmpObj1) === tmpObj2)
          return { level: 1 };
        return false;
      }()
    );
    require_create();
  }
});

// node_modules/es5-ext/object/set-prototype-of/index.js
var require_set_prototype_of = __commonJS({
  "node_modules/es5-ext/object/set-prototype-of/index.js"(exports, module) {
    "use strict";
    module.exports = require_is_implemented4()() ? Object.setPrototypeOf : require_shim4();
  }
});

// node_modules/es5-ext/math/sign/is-implemented.js
var require_is_implemented5 = __commonJS({
  "node_modules/es5-ext/math/sign/is-implemented.js"(exports, module) {
    "use strict";
    module.exports = function() {
      var sign = Math.sign;
      if (typeof sign !== "function")
        return false;
      return sign(10) === 1 && sign(-20) === -1;
    };
  }
});

// node_modules/es5-ext/math/sign/shim.js
var require_shim5 = __commonJS({
  "node_modules/es5-ext/math/sign/shim.js"(exports, module) {
    "use strict";
    module.exports = function(value) {
      value = Number(value);
      if (isNaN(value) || value === 0)
        return value;
      return value > 0 ? 1 : -1;
    };
  }
});

// node_modules/es5-ext/math/sign/index.js
var require_sign = __commonJS({
  "node_modules/es5-ext/math/sign/index.js"(exports, module) {
    "use strict";
    module.exports = require_is_implemented5()() ? Math.sign : require_shim5();
  }
});

// node_modules/es5-ext/number/to-integer.js
var require_to_integer = __commonJS({
  "node_modules/es5-ext/number/to-integer.js"(exports, module) {
    "use strict";
    var sign = require_sign();
    var abs = Math.abs;
    var floor = Math.floor;
    module.exports = function(value) {
      if (isNaN(value))
        return 0;
      value = Number(value);
      if (value === 0 || !isFinite(value))
        return value;
      return sign(value) * floor(abs(value));
    };
  }
});

// node_modules/es5-ext/number/to-pos-integer.js
var require_to_pos_integer = __commonJS({
  "node_modules/es5-ext/number/to-pos-integer.js"(exports, module) {
    "use strict";
    var toInteger = require_to_integer();
    var max = Math.max;
    module.exports = function(value) {
      return max(0, toInteger(value));
    };
  }
});

// node_modules/memoizee/lib/resolve-length.js
var require_resolve_length = __commonJS({
  "node_modules/memoizee/lib/resolve-length.js"(exports, module) {
    "use strict";
    var toPosInt = require_to_pos_integer();
    module.exports = function(optsLength, fnLength, isAsync) {
      var length;
      if (isNaN(optsLength)) {
        length = fnLength;
        if (!(length >= 0))
          return 1;
        if (isAsync && length)
          return length - 1;
        return length;
      }
      if (optsLength === false)
        return false;
      return toPosInt(optsLength);
    };
  }
});

// node_modules/memoizee/lib/registered-extensions.js
var require_registered_extensions = __commonJS({
  "node_modules/memoizee/lib/registered-extensions.js"() {
    "use strict";
  }
});

// node_modules/es5-ext/error/custom.js
var require_custom = __commonJS({
  "node_modules/es5-ext/error/custom.js"(exports, module) {
    "use strict";
    var assign = require_assign();
    var isObject = require_is_object();
    var isValue = require_is_value();
    var captureStackTrace = Error.captureStackTrace;
    module.exports = function(message) {
      var err = new Error(message), code = arguments[1], ext = arguments[2];
      if (!isValue(ext)) {
        if (isObject(code)) {
          ext = code;
          code = null;
        }
      }
      if (isValue(ext))
        assign(err, ext);
      if (isValue(code))
        err.code = code;
      if (captureStackTrace)
        captureStackTrace(err, module.exports);
      return err;
    };
  }
});

// node_modules/es5-ext/object/mixin.js
var require_mixin = __commonJS({
  "node_modules/es5-ext/object/mixin.js"(exports, module) {
    "use strict";
    var value = require_valid_value();
    var defineProperty = Object.defineProperty;
    var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
    var getOwnPropertyNames = Object.getOwnPropertyNames;
    var getOwnPropertySymbols = Object.getOwnPropertySymbols;
    module.exports = function(target, source) {
      var error, sourceObject = Object(value(source));
      target = Object(value(target));
      getOwnPropertyNames(sourceObject).forEach(function(name) {
        try {
          defineProperty(target, name, getOwnPropertyDescriptor(source, name));
        } catch (e) {
          error = e;
        }
      });
      if (typeof getOwnPropertySymbols === "function") {
        getOwnPropertySymbols(sourceObject).forEach(function(symbol) {
          try {
            defineProperty(target, symbol, getOwnPropertyDescriptor(source, symbol));
          } catch (e) {
            error = e;
          }
        });
      }
      if (error !== void 0)
        throw error;
      return target;
    };
  }
});

// node_modules/es5-ext/function/_define-length.js
var require_define_length = __commonJS({
  "node_modules/es5-ext/function/_define-length.js"(exports, module) {
    "use strict";
    var toPosInt = require_to_pos_integer();
    var test = function(arg1, arg2) {
      return arg2;
    };
    var desc;
    var defineProperty;
    var generate;
    var mixin;
    try {
      Object.defineProperty(test, "length", {
        configurable: true,
        writable: false,
        enumerable: false,
        value: 1
      });
    } catch (ignore) {
    }
    if (test.length === 1) {
      desc = { configurable: true, writable: false, enumerable: false };
      defineProperty = Object.defineProperty;
      module.exports = function(fn, length) {
        length = toPosInt(length);
        if (fn.length === length)
          return fn;
        desc.value = length;
        return defineProperty(fn, "length", desc);
      };
    } else {
      mixin = require_mixin();
      generate = function() {
        var cache = [];
        return function(length) {
          var args, i = 0;
          if (cache[length])
            return cache[length];
          args = [];
          while (length--)
            args.push("a" + (++i).toString(36));
          return new Function(
            "fn",
            "return function (" + args.join(", ") + ") { return fn.apply(this, arguments); };"
          );
        };
      }();
      module.exports = function(src, length) {
        var target;
        length = toPosInt(length);
        if (src.length === length)
          return src;
        target = generate(length)(src);
        try {
          mixin(target, src);
        } catch (ignore) {
        }
        return target;
      };
    }
  }
});

// node_modules/event-emitter/index.js
var require_event_emitter = __commonJS({
  "node_modules/event-emitter/index.js"(exports, module) {
    "use strict";
    var d = require_d();
    var callable = require_valid_callable();
    var apply = Function.prototype.apply;
    var call = Function.prototype.call;
    var create = Object.create;
    var defineProperty = Object.defineProperty;
    var defineProperties = Object.defineProperties;
    var hasOwnProperty2 = Object.prototype.hasOwnProperty;
    var descriptor = { configurable: true, enumerable: false, writable: true };
    var on;
    var once;
    var off;
    var emit;
    var methods;
    var descriptors;
    var base;
    on = function(type, listener) {
      var data;
      callable(listener);
      if (!hasOwnProperty2.call(this, "__ee__")) {
        data = descriptor.value = create(null);
        defineProperty(this, "__ee__", descriptor);
        descriptor.value = null;
      } else {
        data = this.__ee__;
      }
      if (!data[type])
        data[type] = listener;
      else if (typeof data[type] === "object")
        data[type].push(listener);
      else
        data[type] = [data[type], listener];
      return this;
    };
    once = function(type, listener) {
      var once2, self2;
      callable(listener);
      self2 = this;
      on.call(this, type, once2 = function() {
        off.call(self2, type, once2);
        apply.call(listener, this, arguments);
      });
      once2.__eeOnceListener__ = listener;
      return this;
    };
    off = function(type, listener) {
      var data, listeners, candidate, i;
      callable(listener);
      if (!hasOwnProperty2.call(this, "__ee__"))
        return this;
      data = this.__ee__;
      if (!data[type])
        return this;
      listeners = data[type];
      if (typeof listeners === "object") {
        for (i = 0; candidate = listeners[i]; ++i) {
          if (candidate === listener || candidate.__eeOnceListener__ === listener) {
            if (listeners.length === 2)
              data[type] = listeners[i ? 0 : 1];
            else
              listeners.splice(i, 1);
          }
        }
      } else {
        if (listeners === listener || listeners.__eeOnceListener__ === listener) {
          delete data[type];
        }
      }
      return this;
    };
    emit = function(type) {
      var i, l, listener, listeners, args;
      if (!hasOwnProperty2.call(this, "__ee__"))
        return;
      listeners = this.__ee__[type];
      if (!listeners)
        return;
      if (typeof listeners === "object") {
        l = arguments.length;
        args = new Array(l - 1);
        for (i = 1; i < l; ++i)
          args[i - 1] = arguments[i];
        listeners = listeners.slice();
        for (i = 0; listener = listeners[i]; ++i) {
          apply.call(listener, this, args);
        }
      } else {
        switch (arguments.length) {
          case 1:
            call.call(listeners, this);
            break;
          case 2:
            call.call(listeners, this, arguments[1]);
            break;
          case 3:
            call.call(listeners, this, arguments[1], arguments[2]);
            break;
          default:
            l = arguments.length;
            args = new Array(l - 1);
            for (i = 1; i < l; ++i) {
              args[i - 1] = arguments[i];
            }
            apply.call(listeners, this, args);
        }
      }
    };
    methods = {
      on,
      once,
      off,
      emit
    };
    descriptors = {
      on: d(on),
      once: d(once),
      off: d(off),
      emit: d(emit)
    };
    base = defineProperties({}, descriptors);
    module.exports = exports = function(o) {
      return o == null ? create(base) : defineProperties(Object(o), descriptors);
    };
    exports.methods = methods;
  }
});

// node_modules/es5-ext/array/from/is-implemented.js
var require_is_implemented6 = __commonJS({
  "node_modules/es5-ext/array/from/is-implemented.js"(exports, module) {
    "use strict";
    module.exports = function() {
      var from = Array.from, arr, result;
      if (typeof from !== "function")
        return false;
      arr = ["raz", "dwa"];
      result = from(arr);
      return Boolean(result && result !== arr && result[1] === "dwa");
    };
  }
});

// node_modules/ext/global-this/is-implemented.js
var require_is_implemented7 = __commonJS({
  "node_modules/ext/global-this/is-implemented.js"(exports, module) {
    "use strict";
    module.exports = function() {
      if (typeof globalThis !== "object")
        return false;
      if (!globalThis)
        return false;
      return globalThis.Array === Array;
    };
  }
});

// node_modules/ext/global-this/implementation.js
var require_implementation = __commonJS({
  "node_modules/ext/global-this/implementation.js"(exports, module) {
    var naiveFallback = function() {
      if (typeof self === "object" && self)
        return self;
      if (typeof window === "object" && window)
        return window;
      throw new Error("Unable to resolve global `this`");
    };
    module.exports = function() {
      if (this)
        return this;
      try {
        Object.defineProperty(Object.prototype, "__global__", {
          get: function() {
            return this;
          },
          configurable: true
        });
      } catch (error) {
        return naiveFallback();
      }
      try {
        if (!__global__)
          return naiveFallback();
        return __global__;
      } finally {
        delete Object.prototype.__global__;
      }
    }();
  }
});

// node_modules/ext/global-this/index.js
var require_global_this = __commonJS({
  "node_modules/ext/global-this/index.js"(exports, module) {
    "use strict";
    module.exports = require_is_implemented7()() ? globalThis : require_implementation();
  }
});

// node_modules/es6-symbol/is-implemented.js
var require_is_implemented8 = __commonJS({
  "node_modules/es6-symbol/is-implemented.js"(exports, module) {
    "use strict";
    var global = require_global_this();
    var validTypes = { object: true, symbol: true };
    module.exports = function() {
      var Symbol = global.Symbol;
      var symbol;
      if (typeof Symbol !== "function")
        return false;
      symbol = Symbol("test symbol");
      try {
        String(symbol);
      } catch (e) {
        return false;
      }
      if (!validTypes[typeof Symbol.iterator])
        return false;
      if (!validTypes[typeof Symbol.toPrimitive])
        return false;
      if (!validTypes[typeof Symbol.toStringTag])
        return false;
      return true;
    };
  }
});

// node_modules/es6-symbol/is-symbol.js
var require_is_symbol = __commonJS({
  "node_modules/es6-symbol/is-symbol.js"(exports, module) {
    "use strict";
    module.exports = function(value) {
      if (!value)
        return false;
      if (typeof value === "symbol")
        return true;
      if (!value.constructor)
        return false;
      if (value.constructor.name !== "Symbol")
        return false;
      return value[value.constructor.toStringTag] === "Symbol";
    };
  }
});

// node_modules/es6-symbol/validate-symbol.js
var require_validate_symbol = __commonJS({
  "node_modules/es6-symbol/validate-symbol.js"(exports, module) {
    "use strict";
    var isSymbol = require_is_symbol();
    module.exports = function(value) {
      if (!isSymbol(value))
        throw new TypeError(value + " is not a symbol");
      return value;
    };
  }
});

// node_modules/es6-symbol/lib/private/generate-name.js
var require_generate_name = __commonJS({
  "node_modules/es6-symbol/lib/private/generate-name.js"(exports, module) {
    "use strict";
    var d = require_d();
    var create = Object.create;
    var defineProperty = Object.defineProperty;
    var objPrototype = Object.prototype;
    var created = create(null);
    module.exports = function(desc) {
      var postfix = 0, name, ie11BugWorkaround;
      while (created[desc + (postfix || "")])
        ++postfix;
      desc += postfix || "";
      created[desc] = true;
      name = "@@" + desc;
      defineProperty(
        objPrototype,
        name,
        d.gs(null, function(value) {
          if (ie11BugWorkaround)
            return;
          ie11BugWorkaround = true;
          defineProperty(this, name, d(value));
          ie11BugWorkaround = false;
        })
      );
      return name;
    };
  }
});

// node_modules/es6-symbol/lib/private/setup/standard-symbols.js
var require_standard_symbols = __commonJS({
  "node_modules/es6-symbol/lib/private/setup/standard-symbols.js"(exports, module) {
    "use strict";
    var d = require_d();
    var NativeSymbol = require_global_this().Symbol;
    module.exports = function(SymbolPolyfill) {
      return Object.defineProperties(SymbolPolyfill, {
        hasInstance: d(
          "",
          NativeSymbol && NativeSymbol.hasInstance || SymbolPolyfill("hasInstance")
        ),
        isConcatSpreadable: d(
          "",
          NativeSymbol && NativeSymbol.isConcatSpreadable || SymbolPolyfill("isConcatSpreadable")
        ),
        iterator: d("", NativeSymbol && NativeSymbol.iterator || SymbolPolyfill("iterator")),
        match: d("", NativeSymbol && NativeSymbol.match || SymbolPolyfill("match")),
        replace: d("", NativeSymbol && NativeSymbol.replace || SymbolPolyfill("replace")),
        search: d("", NativeSymbol && NativeSymbol.search || SymbolPolyfill("search")),
        species: d("", NativeSymbol && NativeSymbol.species || SymbolPolyfill("species")),
        split: d("", NativeSymbol && NativeSymbol.split || SymbolPolyfill("split")),
        toPrimitive: d(
          "",
          NativeSymbol && NativeSymbol.toPrimitive || SymbolPolyfill("toPrimitive")
        ),
        toStringTag: d(
          "",
          NativeSymbol && NativeSymbol.toStringTag || SymbolPolyfill("toStringTag")
        ),
        unscopables: d(
          "",
          NativeSymbol && NativeSymbol.unscopables || SymbolPolyfill("unscopables")
        )
      });
    };
  }
});

// node_modules/es6-symbol/lib/private/setup/symbol-registry.js
var require_symbol_registry = __commonJS({
  "node_modules/es6-symbol/lib/private/setup/symbol-registry.js"(exports, module) {
    "use strict";
    var d = require_d();
    var validateSymbol = require_validate_symbol();
    var registry = /* @__PURE__ */ Object.create(null);
    module.exports = function(SymbolPolyfill) {
      return Object.defineProperties(SymbolPolyfill, {
        for: d(function(key) {
          if (registry[key])
            return registry[key];
          return registry[key] = SymbolPolyfill(String(key));
        }),
        keyFor: d(function(symbol) {
          var key;
          validateSymbol(symbol);
          for (key in registry) {
            if (registry[key] === symbol)
              return key;
          }
          return void 0;
        })
      });
    };
  }
});

// node_modules/es6-symbol/polyfill.js
var require_polyfill = __commonJS({
  "node_modules/es6-symbol/polyfill.js"(exports, module) {
    "use strict";
    var d = require_d();
    var validateSymbol = require_validate_symbol();
    var NativeSymbol = require_global_this().Symbol;
    var generateName = require_generate_name();
    var setupStandardSymbols = require_standard_symbols();
    var setupSymbolRegistry = require_symbol_registry();
    var create = Object.create;
    var defineProperties = Object.defineProperties;
    var defineProperty = Object.defineProperty;
    var SymbolPolyfill;
    var HiddenSymbol;
    var isNativeSafe;
    if (typeof NativeSymbol === "function") {
      try {
        String(NativeSymbol());
        isNativeSafe = true;
      } catch (ignore) {
      }
    } else {
      NativeSymbol = null;
    }
    HiddenSymbol = function Symbol(description) {
      if (this instanceof HiddenSymbol)
        throw new TypeError("Symbol is not a constructor");
      return SymbolPolyfill(description);
    };
    module.exports = SymbolPolyfill = function Symbol(description) {
      var symbol;
      if (this instanceof Symbol)
        throw new TypeError("Symbol is not a constructor");
      if (isNativeSafe)
        return NativeSymbol(description);
      symbol = create(HiddenSymbol.prototype);
      description = description === void 0 ? "" : String(description);
      return defineProperties(symbol, {
        __description__: d("", description),
        __name__: d("", generateName(description))
      });
    };
    setupStandardSymbols(SymbolPolyfill);
    setupSymbolRegistry(SymbolPolyfill);
    defineProperties(HiddenSymbol.prototype, {
      constructor: d(SymbolPolyfill),
      toString: d("", function() {
        return this.__name__;
      })
    });
    defineProperties(SymbolPolyfill.prototype, {
      toString: d(function() {
        return "Symbol (" + validateSymbol(this).__description__ + ")";
      }),
      valueOf: d(function() {
        return validateSymbol(this);
      })
    });
    defineProperty(
      SymbolPolyfill.prototype,
      SymbolPolyfill.toPrimitive,
      d("", function() {
        var symbol = validateSymbol(this);
        if (typeof symbol === "symbol")
          return symbol;
        return symbol.toString();
      })
    );
    defineProperty(SymbolPolyfill.prototype, SymbolPolyfill.toStringTag, d("c", "Symbol"));
    defineProperty(
      HiddenSymbol.prototype,
      SymbolPolyfill.toStringTag,
      d("c", SymbolPolyfill.prototype[SymbolPolyfill.toStringTag])
    );
    defineProperty(
      HiddenSymbol.prototype,
      SymbolPolyfill.toPrimitive,
      d("c", SymbolPolyfill.prototype[SymbolPolyfill.toPrimitive])
    );
  }
});

// node_modules/es6-symbol/index.js
var require_es6_symbol = __commonJS({
  "node_modules/es6-symbol/index.js"(exports, module) {
    "use strict";
    module.exports = require_is_implemented8()() ? require_global_this().Symbol : require_polyfill();
  }
});

// node_modules/es5-ext/function/is-arguments.js
var require_is_arguments = __commonJS({
  "node_modules/es5-ext/function/is-arguments.js"(exports, module) {
    "use strict";
    var objToString = Object.prototype.toString;
    var id = objToString.call(function() {
      return arguments;
    }());
    module.exports = function(value) {
      return objToString.call(value) === id;
    };
  }
});

// node_modules/es5-ext/function/is-function.js
var require_is_function = __commonJS({
  "node_modules/es5-ext/function/is-function.js"(exports, module) {
    "use strict";
    var objToString = Object.prototype.toString;
    var isFunctionStringTag = RegExp.prototype.test.bind(/^[object [A-Za-z0-9]*Function]$/);
    module.exports = function(value) {
      return typeof value === "function" && isFunctionStringTag(objToString.call(value));
    };
  }
});

// node_modules/es5-ext/string/is-string.js
var require_is_string = __commonJS({
  "node_modules/es5-ext/string/is-string.js"(exports, module) {
    "use strict";
    var objToString = Object.prototype.toString;
    var id = objToString.call("");
    module.exports = function(value) {
      return typeof value === "string" || value && typeof value === "object" && (value instanceof String || objToString.call(value) === id) || false;
    };
  }
});

// node_modules/es5-ext/array/from/shim.js
var require_shim6 = __commonJS({
  "node_modules/es5-ext/array/from/shim.js"(exports, module) {
    "use strict";
    var iteratorSymbol = require_es6_symbol().iterator;
    var isArguments = require_is_arguments();
    var isFunction = require_is_function();
    var toPosInt = require_to_pos_integer();
    var callable = require_valid_callable();
    var validValue = require_valid_value();
    var isValue = require_is_value();
    var isString = require_is_string();
    var isArray = Array.isArray;
    var call = Function.prototype.call;
    var desc = { configurable: true, enumerable: true, writable: true, value: null };
    var defineProperty = Object.defineProperty;
    module.exports = function(arrayLike) {
      var mapFn = arguments[1], thisArg = arguments[2], Context, i, j, arr, length, code, iterator, result, getIterator, value;
      arrayLike = Object(validValue(arrayLike));
      if (isValue(mapFn))
        callable(mapFn);
      if (!this || this === Array || !isFunction(this)) {
        if (!mapFn) {
          if (isArguments(arrayLike)) {
            length = arrayLike.length;
            if (length !== 1)
              return Array.apply(null, arrayLike);
            arr = new Array(1);
            arr[0] = arrayLike[0];
            return arr;
          }
          if (isArray(arrayLike)) {
            arr = new Array(length = arrayLike.length);
            for (i = 0; i < length; ++i)
              arr[i] = arrayLike[i];
            return arr;
          }
        }
        arr = [];
      } else {
        Context = this;
      }
      if (!isArray(arrayLike)) {
        if ((getIterator = arrayLike[iteratorSymbol]) !== void 0) {
          iterator = callable(getIterator).call(arrayLike);
          if (Context)
            arr = new Context();
          result = iterator.next();
          i = 0;
          while (!result.done) {
            value = mapFn ? call.call(mapFn, thisArg, result.value, i) : result.value;
            if (Context) {
              desc.value = value;
              defineProperty(arr, i, desc);
            } else {
              arr[i] = value;
            }
            result = iterator.next();
            ++i;
          }
          length = i;
        } else if (isString(arrayLike)) {
          length = arrayLike.length;
          if (Context)
            arr = new Context();
          for (i = 0, j = 0; i < length; ++i) {
            value = arrayLike[i];
            if (i + 1 < length) {
              code = value.charCodeAt(0);
              if (code >= 55296 && code <= 56319)
                value += arrayLike[++i];
            }
            value = mapFn ? call.call(mapFn, thisArg, value, j) : value;
            if (Context) {
              desc.value = value;
              defineProperty(arr, j, desc);
            } else {
              arr[j] = value;
            }
            ++j;
          }
          length = j;
        }
      }
      if (length === void 0) {
        length = toPosInt(arrayLike.length);
        if (Context)
          arr = new Context(length);
        for (i = 0; i < length; ++i) {
          value = mapFn ? call.call(mapFn, thisArg, arrayLike[i], i) : arrayLike[i];
          if (Context) {
            desc.value = value;
            defineProperty(arr, i, desc);
          } else {
            arr[i] = value;
          }
        }
      }
      if (Context) {
        desc.value = null;
        arr.length = length;
      }
      return arr;
    };
  }
});

// node_modules/es5-ext/array/from/index.js
var require_from = __commonJS({
  "node_modules/es5-ext/array/from/index.js"(exports, module) {
    "use strict";
    module.exports = require_is_implemented6()() ? Array.from : require_shim6();
  }
});

// node_modules/es5-ext/array/to-array.js
var require_to_array = __commonJS({
  "node_modules/es5-ext/array/to-array.js"(exports, module) {
    "use strict";
    var from = require_from();
    var isArray = Array.isArray;
    module.exports = function(arrayLike) {
      return isArray(arrayLike) ? arrayLike : from(arrayLike);
    };
  }
});

// node_modules/memoizee/lib/resolve-resolve.js
var require_resolve_resolve = __commonJS({
  "node_modules/memoizee/lib/resolve-resolve.js"(exports, module) {
    "use strict";
    var toArray = require_to_array();
    var isValue = require_is_value();
    var callable = require_valid_callable();
    var slice = Array.prototype.slice;
    var resolveArgs;
    resolveArgs = function(args) {
      return this.map(function(resolve, i) {
        return resolve ? resolve(args[i]) : args[i];
      }).concat(slice.call(args, this.length));
    };
    module.exports = function(resolvers) {
      resolvers = toArray(resolvers);
      resolvers.forEach(function(resolve) {
        if (isValue(resolve))
          callable(resolve);
      });
      return resolveArgs.bind(resolvers);
    };
  }
});

// node_modules/memoizee/lib/resolve-normalize.js
var require_resolve_normalize = __commonJS({
  "node_modules/memoizee/lib/resolve-normalize.js"(exports, module) {
    "use strict";
    var callable = require_valid_callable();
    module.exports = function(userNormalizer) {
      var normalizer;
      if (typeof userNormalizer === "function")
        return { set: userNormalizer, get: userNormalizer };
      normalizer = { get: callable(userNormalizer.get) };
      if (userNormalizer.set !== void 0) {
        normalizer.set = callable(userNormalizer.set);
        if (userNormalizer.delete)
          normalizer.delete = callable(userNormalizer.delete);
        if (userNormalizer.clear)
          normalizer.clear = callable(userNormalizer.clear);
        return normalizer;
      }
      normalizer.set = normalizer.get;
      return normalizer;
    };
  }
});

// node_modules/memoizee/lib/configure-map.js
var require_configure_map = __commonJS({
  "node_modules/memoizee/lib/configure-map.js"(exports, module) {
    "use strict";
    var customError = require_custom();
    var defineLength = require_define_length();
    var d = require_d();
    var ee = require_event_emitter().methods;
    var resolveResolve = require_resolve_resolve();
    var resolveNormalize = require_resolve_normalize();
    var apply = Function.prototype.apply;
    var call = Function.prototype.call;
    var create = Object.create;
    var defineProperties = Object.defineProperties;
    var on = ee.on;
    var emit = ee.emit;
    module.exports = function(original, length, options) {
      var cache = create(null), conf, memLength, get, set, del, clear, extDel, extGet, extHas, normalizer, getListeners, setListeners, deleteListeners, memoized, resolve;
      if (length !== false)
        memLength = length;
      else if (isNaN(original.length))
        memLength = 1;
      else
        memLength = original.length;
      if (options.normalizer) {
        normalizer = resolveNormalize(options.normalizer);
        get = normalizer.get;
        set = normalizer.set;
        del = normalizer.delete;
        clear = normalizer.clear;
      }
      if (options.resolvers != null)
        resolve = resolveResolve(options.resolvers);
      if (get) {
        memoized = defineLength(function(arg) {
          var id, result, args = arguments;
          if (resolve)
            args = resolve(args);
          id = get(args);
          if (id !== null) {
            if (hasOwnProperty.call(cache, id)) {
              if (getListeners)
                conf.emit("get", id, args, this);
              return cache[id];
            }
          }
          if (args.length === 1)
            result = call.call(original, this, args[0]);
          else
            result = apply.call(original, this, args);
          if (id === null) {
            id = get(args);
            if (id !== null)
              throw customError("Circular invocation", "CIRCULAR_INVOCATION");
            id = set(args);
          } else if (hasOwnProperty.call(cache, id)) {
            throw customError("Circular invocation", "CIRCULAR_INVOCATION");
          }
          cache[id] = result;
          if (setListeners)
            conf.emit("set", id, null, result);
          return result;
        }, memLength);
      } else if (length === 0) {
        memoized = function() {
          var result;
          if (hasOwnProperty.call(cache, "data")) {
            if (getListeners)
              conf.emit("get", "data", arguments, this);
            return cache.data;
          }
          if (arguments.length)
            result = apply.call(original, this, arguments);
          else
            result = call.call(original, this);
          if (hasOwnProperty.call(cache, "data")) {
            throw customError("Circular invocation", "CIRCULAR_INVOCATION");
          }
          cache.data = result;
          if (setListeners)
            conf.emit("set", "data", null, result);
          return result;
        };
      } else {
        memoized = function(arg) {
          var result, args = arguments, id;
          if (resolve)
            args = resolve(arguments);
          id = String(args[0]);
          if (hasOwnProperty.call(cache, id)) {
            if (getListeners)
              conf.emit("get", id, args, this);
            return cache[id];
          }
          if (args.length === 1)
            result = call.call(original, this, args[0]);
          else
            result = apply.call(original, this, args);
          if (hasOwnProperty.call(cache, id)) {
            throw customError("Circular invocation", "CIRCULAR_INVOCATION");
          }
          cache[id] = result;
          if (setListeners)
            conf.emit("set", id, null, result);
          return result;
        };
      }
      conf = {
        original,
        memoized,
        profileName: options.profileName,
        get: function(args) {
          if (resolve)
            args = resolve(args);
          if (get)
            return get(args);
          return String(args[0]);
        },
        has: function(id) {
          return hasOwnProperty.call(cache, id);
        },
        delete: function(id) {
          var result;
          if (!hasOwnProperty.call(cache, id))
            return;
          if (del)
            del(id);
          result = cache[id];
          delete cache[id];
          if (deleteListeners)
            conf.emit("delete", id, result);
        },
        clear: function() {
          var oldCache = cache;
          if (clear)
            clear();
          cache = create(null);
          conf.emit("clear", oldCache);
        },
        on: function(type, listener) {
          if (type === "get")
            getListeners = true;
          else if (type === "set")
            setListeners = true;
          else if (type === "delete")
            deleteListeners = true;
          return on.call(this, type, listener);
        },
        emit,
        updateEnv: function() {
          original = conf.original;
        }
      };
      if (get) {
        extDel = defineLength(function(arg) {
          var id, args = arguments;
          if (resolve)
            args = resolve(args);
          id = get(args);
          if (id === null)
            return;
          conf.delete(id);
        }, memLength);
      } else if (length === 0) {
        extDel = function() {
          return conf.delete("data");
        };
      } else {
        extDel = function(arg) {
          if (resolve)
            arg = resolve(arguments)[0];
          return conf.delete(arg);
        };
      }
      extGet = defineLength(function() {
        var id, args = arguments;
        if (length === 0)
          return cache.data;
        if (resolve)
          args = resolve(args);
        if (get)
          id = get(args);
        else
          id = String(args[0]);
        return cache[id];
      });
      extHas = defineLength(function() {
        var id, args = arguments;
        if (length === 0)
          return conf.has("data");
        if (resolve)
          args = resolve(args);
        if (get)
          id = get(args);
        else
          id = String(args[0]);
        if (id === null)
          return false;
        return conf.has(id);
      });
      defineProperties(memoized, {
        __memoized__: d(true),
        delete: d(extDel),
        clear: d(conf.clear),
        _get: d(extGet),
        _has: d(extHas)
      });
      return conf;
    };
  }
});

// node_modules/memoizee/plain.js
var require_plain = __commonJS({
  "node_modules/memoizee/plain.js"(exports, module) {
    "use strict";
    var callable = require_valid_callable();
    var forEach = require_for_each();
    var extensions = require_registered_extensions();
    var configure = require_configure_map();
    var resolveLength = require_resolve_length();
    module.exports = function self2(fn) {
      var options, length, conf;
      callable(fn);
      options = Object(arguments[1]);
      if (options.async && options.promise) {
        throw new Error("Options 'async' and 'promise' cannot be used together");
      }
      if (hasOwnProperty.call(fn, "__memoized__") && !options.force)
        return fn;
      length = resolveLength(options.length, fn.length, options.async && extensions.async);
      conf = configure(fn, length, options);
      forEach(extensions, function(extFn, name) {
        if (options[name])
          extFn(options[name], conf, options);
      });
      if (self2.__profiler__)
        self2.__profiler__(conf);
      conf.updateEnv();
      return conf.memoized;
    };
  }
});

// node_modules/memoizee/normalizers/primitive.js
var require_primitive = __commonJS({
  "node_modules/memoizee/normalizers/primitive.js"(exports, module) {
    "use strict";
    module.exports = function(args) {
      var id, i, length = args.length;
      if (!length)
        return "";
      id = String(args[i = 0]);
      while (--length)
        id += "" + args[++i];
      return id;
    };
  }
});

// node_modules/memoizee/normalizers/get-primitive-fixed.js
var require_get_primitive_fixed = __commonJS({
  "node_modules/memoizee/normalizers/get-primitive-fixed.js"(exports, module) {
    "use strict";
    module.exports = function(length) {
      if (!length) {
        return function() {
          return "";
        };
      }
      return function(args) {
        var id = String(args[0]), i = 0, currentLength = length;
        while (--currentLength) {
          id += "" + args[++i];
        }
        return id;
      };
    };
  }
});

// node_modules/es5-ext/number/is-nan/is-implemented.js
var require_is_implemented9 = __commonJS({
  "node_modules/es5-ext/number/is-nan/is-implemented.js"(exports, module) {
    "use strict";
    module.exports = function() {
      var numberIsNaN = Number.isNaN;
      if (typeof numberIsNaN !== "function")
        return false;
      return !numberIsNaN({}) && numberIsNaN(NaN) && !numberIsNaN(34);
    };
  }
});

// node_modules/es5-ext/number/is-nan/shim.js
var require_shim7 = __commonJS({
  "node_modules/es5-ext/number/is-nan/shim.js"(exports, module) {
    "use strict";
    module.exports = function(value) {
      return value !== value;
    };
  }
});

// node_modules/es5-ext/number/is-nan/index.js
var require_is_nan = __commonJS({
  "node_modules/es5-ext/number/is-nan/index.js"(exports, module) {
    "use strict";
    module.exports = require_is_implemented9()() ? Number.isNaN : require_shim7();
  }
});

// node_modules/es5-ext/array/#/e-index-of.js
var require_e_index_of = __commonJS({
  "node_modules/es5-ext/array/#/e-index-of.js"(exports, module) {
    "use strict";
    var numberIsNaN = require_is_nan();
    var toPosInt = require_to_pos_integer();
    var value = require_valid_value();
    var indexOf = Array.prototype.indexOf;
    var objHasOwnProperty = Object.prototype.hasOwnProperty;
    var abs = Math.abs;
    var floor = Math.floor;
    module.exports = function(searchElement) {
      var i, length, fromIndex, val;
      if (!numberIsNaN(searchElement))
        return indexOf.apply(this, arguments);
      length = toPosInt(value(this).length);
      fromIndex = arguments[1];
      if (isNaN(fromIndex))
        fromIndex = 0;
      else if (fromIndex >= 0)
        fromIndex = floor(fromIndex);
      else
        fromIndex = toPosInt(this.length) - floor(abs(fromIndex));
      for (i = fromIndex; i < length; ++i) {
        if (objHasOwnProperty.call(this, i)) {
          val = this[i];
          if (numberIsNaN(val))
            return i;
        }
      }
      return -1;
    };
  }
});

// node_modules/memoizee/normalizers/get.js
var require_get = __commonJS({
  "node_modules/memoizee/normalizers/get.js"(exports, module) {
    "use strict";
    var indexOf = require_e_index_of();
    var create = Object.create;
    module.exports = function() {
      var lastId = 0, map = [], cache = create(null);
      return {
        get: function(args) {
          var index = 0, set = map, i, length = args.length;
          if (length === 0)
            return set[length] || null;
          if (set = set[length]) {
            while (index < length - 1) {
              i = indexOf.call(set[0], args[index]);
              if (i === -1)
                return null;
              set = set[1][i];
              ++index;
            }
            i = indexOf.call(set[0], args[index]);
            if (i === -1)
              return null;
            return set[1][i] || null;
          }
          return null;
        },
        set: function(args) {
          var index = 0, set = map, i, length = args.length;
          if (length === 0) {
            set[length] = ++lastId;
          } else {
            if (!set[length]) {
              set[length] = [[], []];
            }
            set = set[length];
            while (index < length - 1) {
              i = indexOf.call(set[0], args[index]);
              if (i === -1) {
                i = set[0].push(args[index]) - 1;
                set[1].push([[], []]);
              }
              set = set[1][i];
              ++index;
            }
            i = indexOf.call(set[0], args[index]);
            if (i === -1) {
              i = set[0].push(args[index]) - 1;
            }
            set[1][i] = ++lastId;
          }
          cache[lastId] = args;
          return lastId;
        },
        delete: function(id) {
          var index = 0, set = map, i, args = cache[id], length = args.length, path = [];
          if (length === 0) {
            delete set[length];
          } else if (set = set[length]) {
            while (index < length - 1) {
              i = indexOf.call(set[0], args[index]);
              if (i === -1) {
                return;
              }
              path.push(set, i);
              set = set[1][i];
              ++index;
            }
            i = indexOf.call(set[0], args[index]);
            if (i === -1) {
              return;
            }
            id = set[1][i];
            set[0].splice(i, 1);
            set[1].splice(i, 1);
            while (!set[0].length && path.length) {
              i = path.pop();
              set = path.pop();
              set[0].splice(i, 1);
              set[1].splice(i, 1);
            }
          }
          delete cache[id];
        },
        clear: function() {
          map = [];
          cache = create(null);
        }
      };
    };
  }
});

// node_modules/memoizee/normalizers/get-1.js
var require_get_1 = __commonJS({
  "node_modules/memoizee/normalizers/get-1.js"(exports, module) {
    "use strict";
    var indexOf = require_e_index_of();
    module.exports = function() {
      var lastId = 0, argsMap = [], cache = [];
      return {
        get: function(args) {
          var index = indexOf.call(argsMap, args[0]);
          return index === -1 ? null : cache[index];
        },
        set: function(args) {
          argsMap.push(args[0]);
          cache.push(++lastId);
          return lastId;
        },
        delete: function(id) {
          var index = indexOf.call(cache, id);
          if (index !== -1) {
            argsMap.splice(index, 1);
            cache.splice(index, 1);
          }
        },
        clear: function() {
          argsMap = [];
          cache = [];
        }
      };
    };
  }
});

// node_modules/memoizee/normalizers/get-fixed.js
var require_get_fixed = __commonJS({
  "node_modules/memoizee/normalizers/get-fixed.js"(exports, module) {
    "use strict";
    var indexOf = require_e_index_of();
    var create = Object.create;
    module.exports = function(length) {
      var lastId = 0, map = [[], []], cache = create(null);
      return {
        get: function(args) {
          var index = 0, set = map, i;
          while (index < length - 1) {
            i = indexOf.call(set[0], args[index]);
            if (i === -1)
              return null;
            set = set[1][i];
            ++index;
          }
          i = indexOf.call(set[0], args[index]);
          if (i === -1)
            return null;
          return set[1][i] || null;
        },
        set: function(args) {
          var index = 0, set = map, i;
          while (index < length - 1) {
            i = indexOf.call(set[0], args[index]);
            if (i === -1) {
              i = set[0].push(args[index]) - 1;
              set[1].push([[], []]);
            }
            set = set[1][i];
            ++index;
          }
          i = indexOf.call(set[0], args[index]);
          if (i === -1) {
            i = set[0].push(args[index]) - 1;
          }
          set[1][i] = ++lastId;
          cache[lastId] = args;
          return lastId;
        },
        delete: function(id) {
          var index = 0, set = map, i, path = [], args = cache[id];
          while (index < length - 1) {
            i = indexOf.call(set[0], args[index]);
            if (i === -1) {
              return;
            }
            path.push(set, i);
            set = set[1][i];
            ++index;
          }
          i = indexOf.call(set[0], args[index]);
          if (i === -1) {
            return;
          }
          id = set[1][i];
          set[0].splice(i, 1);
          set[1].splice(i, 1);
          while (!set[0].length && path.length) {
            i = path.pop();
            set = path.pop();
            set[0].splice(i, 1);
            set[1].splice(i, 1);
          }
          delete cache[id];
        },
        clear: function() {
          map = [[], []];
          cache = create(null);
        }
      };
    };
  }
});

// node_modules/next-tick/index.js
var require_next_tick = __commonJS({
  "node_modules/next-tick/index.js"(exports, module) {
    "use strict";
    var ensureCallable = function(fn) {
      if (typeof fn !== "function")
        throw new TypeError(fn + " is not a function");
      return fn;
    };
    var byObserver = function(Observer) {
      var node = document.createTextNode(""), queue, currentQueue, i = 0;
      new Observer(function() {
        var callback;
        if (!queue) {
          if (!currentQueue)
            return;
          queue = currentQueue;
        } else if (currentQueue) {
          queue = currentQueue.concat(queue);
        }
        currentQueue = queue;
        queue = null;
        if (typeof currentQueue === "function") {
          callback = currentQueue;
          currentQueue = null;
          callback();
          return;
        }
        node.data = i = ++i % 2;
        while (currentQueue) {
          callback = currentQueue.shift();
          if (!currentQueue.length)
            currentQueue = null;
          callback();
        }
      }).observe(node, { characterData: true });
      return function(fn) {
        ensureCallable(fn);
        if (queue) {
          if (typeof queue === "function")
            queue = [queue, fn];
          else
            queue.push(fn);
          return;
        }
        queue = fn;
        node.data = i = ++i % 2;
      };
    };
    module.exports = function() {
      if (typeof process === "object" && process && typeof process.nextTick === "function") {
        return process.nextTick;
      }
      if (typeof queueMicrotask === "function") {
        return function(cb) {
          queueMicrotask(ensureCallable(cb));
        };
      }
      if (typeof document === "object" && document) {
        if (typeof MutationObserver === "function")
          return byObserver(MutationObserver);
        if (typeof WebKitMutationObserver === "function")
          return byObserver(WebKitMutationObserver);
      }
      if (typeof setImmediate === "function") {
        return function(cb) {
          setImmediate(ensureCallable(cb));
        };
      }
      if (typeof setTimeout === "function" || typeof setTimeout === "object") {
        return function(cb) {
          setTimeout(ensureCallable(cb), 0);
        };
      }
      return null;
    }();
  }
});

// node_modules/memoizee/ext/async.js
var require_async = __commonJS({
  "node_modules/memoizee/ext/async.js"() {
    "use strict";
    var aFrom = require_from();
    var objectMap = require_map();
    var mixin = require_mixin();
    var defineLength = require_define_length();
    var nextTick = require_next_tick();
    var slice = Array.prototype.slice;
    var apply = Function.prototype.apply;
    var create = Object.create;
    require_registered_extensions().async = function(tbi, conf) {
      var waiting = create(null), cache = create(null), base = conf.memoized, original = conf.original, currentCallback, currentContext, currentArgs;
      conf.memoized = defineLength(function(arg) {
        var args = arguments, last = args[args.length - 1];
        if (typeof last === "function") {
          currentCallback = last;
          args = slice.call(args, 0, -1);
        }
        return base.apply(currentContext = this, currentArgs = args);
      }, base);
      try {
        mixin(conf.memoized, base);
      } catch (ignore) {
      }
      conf.on("get", function(id) {
        var cb, context, args;
        if (!currentCallback)
          return;
        if (waiting[id]) {
          if (typeof waiting[id] === "function")
            waiting[id] = [waiting[id], currentCallback];
          else
            waiting[id].push(currentCallback);
          currentCallback = null;
          return;
        }
        cb = currentCallback;
        context = currentContext;
        args = currentArgs;
        currentCallback = currentContext = currentArgs = null;
        nextTick(function() {
          var data;
          if (hasOwnProperty.call(cache, id)) {
            data = cache[id];
            conf.emit("getasync", id, args, context);
            apply.call(cb, data.context, data.args);
          } else {
            currentCallback = cb;
            currentContext = context;
            currentArgs = args;
            base.apply(context, args);
          }
        });
      });
      conf.original = function() {
        var args, cb, origCb, result;
        if (!currentCallback)
          return apply.call(original, this, arguments);
        args = aFrom(arguments);
        cb = function self2(err) {
          var cb2, args2, id = self2.id;
          if (id == null) {
            nextTick(apply.bind(self2, this, arguments));
            return void 0;
          }
          delete self2.id;
          cb2 = waiting[id];
          delete waiting[id];
          if (!cb2) {
            return void 0;
          }
          args2 = aFrom(arguments);
          if (conf.has(id)) {
            if (err) {
              conf.delete(id);
            } else {
              cache[id] = { context: this, args: args2 };
              conf.emit("setasync", id, typeof cb2 === "function" ? 1 : cb2.length);
            }
          }
          if (typeof cb2 === "function") {
            result = apply.call(cb2, this, args2);
          } else {
            cb2.forEach(function(cb3) {
              result = apply.call(cb3, this, args2);
            }, this);
          }
          return result;
        };
        origCb = currentCallback;
        currentCallback = currentContext = currentArgs = null;
        args.push(cb);
        result = apply.call(original, this, args);
        cb.cb = origCb;
        currentCallback = cb;
        return result;
      };
      conf.on("set", function(id) {
        if (!currentCallback) {
          conf.delete(id);
          return;
        }
        if (waiting[id]) {
          if (typeof waiting[id] === "function")
            waiting[id] = [waiting[id], currentCallback.cb];
          else
            waiting[id].push(currentCallback.cb);
        } else {
          waiting[id] = currentCallback.cb;
        }
        delete currentCallback.cb;
        currentCallback.id = id;
        currentCallback = null;
      });
      conf.on("delete", function(id) {
        var result;
        if (hasOwnProperty.call(waiting, id))
          return;
        if (!cache[id])
          return;
        result = cache[id];
        delete cache[id];
        conf.emit("deleteasync", id, slice.call(result.args, 1));
      });
      conf.on("clear", function() {
        var oldCache = cache;
        cache = create(null);
        conf.emit(
          "clearasync",
          objectMap(oldCache, function(data) {
            return slice.call(data.args, 1);
          })
        );
      });
    };
  }
});

// node_modules/es5-ext/object/is-callable.js
var require_is_callable = __commonJS({
  "node_modules/es5-ext/object/is-callable.js"(exports, module) {
    "use strict";
    module.exports = function(obj) {
      return typeof obj === "function";
    };
  }
});

// node_modules/es5-ext/object/validate-stringifiable.js
var require_validate_stringifiable = __commonJS({
  "node_modules/es5-ext/object/validate-stringifiable.js"(exports, module) {
    "use strict";
    var isCallable = require_is_callable();
    module.exports = function(stringifiable) {
      try {
        if (stringifiable && isCallable(stringifiable.toString))
          return stringifiable.toString();
        return String(stringifiable);
      } catch (e) {
        throw new TypeError("Passed argument cannot be stringifed");
      }
    };
  }
});

// node_modules/es5-ext/object/validate-stringifiable-value.js
var require_validate_stringifiable_value = __commonJS({
  "node_modules/es5-ext/object/validate-stringifiable-value.js"(exports, module) {
    "use strict";
    var ensureValue = require_valid_value();
    var stringifiable = require_validate_stringifiable();
    module.exports = function(value) {
      return stringifiable(ensureValue(value));
    };
  }
});

// node_modules/es5-ext/safe-to-string.js
var require_safe_to_string = __commonJS({
  "node_modules/es5-ext/safe-to-string.js"(exports, module) {
    "use strict";
    var isCallable = require_is_callable();
    module.exports = function(value) {
      try {
        if (value && isCallable(value.toString))
          return value.toString();
        return String(value);
      } catch (e) {
        return "<Non-coercible to string value>";
      }
    };
  }
});

// node_modules/es5-ext/to-short-string-representation.js
var require_to_short_string_representation = __commonJS({
  "node_modules/es5-ext/to-short-string-representation.js"(exports, module) {
    "use strict";
    var safeToString = require_safe_to_string();
    var reNewLine = /[\n\r\u2028\u2029]/g;
    module.exports = function(value) {
      var string = safeToString(value);
      if (string.length > 100)
        string = string.slice(0, 99) + "\u2026";
      string = string.replace(reNewLine, function(char) {
        return JSON.stringify(char).slice(1, -1);
      });
      return string;
    };
  }
});

// node_modules/is-promise/index.js
var require_is_promise = __commonJS({
  "node_modules/is-promise/index.js"(exports, module) {
    module.exports = isPromise;
    module.exports.default = isPromise;
    function isPromise(obj) {
      return !!obj && (typeof obj === "object" || typeof obj === "function") && typeof obj.then === "function";
    }
  }
});

// node_modules/memoizee/ext/promise.js
var require_promise = __commonJS({
  "node_modules/memoizee/ext/promise.js"() {
    "use strict";
    var objectMap = require_map();
    var primitiveSet = require_primitive_set();
    var ensureString = require_validate_stringifiable_value();
    var toShortString = require_to_short_string_representation();
    var isPromise = require_is_promise();
    var nextTick = require_next_tick();
    var create = Object.create;
    var supportedModes = primitiveSet("then", "then:finally", "done", "done:finally");
    require_registered_extensions().promise = function(mode, conf) {
      var waiting = create(null), cache = create(null), promises = create(null);
      if (mode === true) {
        mode = null;
      } else {
        mode = ensureString(mode);
        if (!supportedModes[mode]) {
          throw new TypeError("'" + toShortString(mode) + "' is not valid promise mode");
        }
      }
      conf.on("set", function(id, ignore, promise) {
        var isFailed = false;
        if (!isPromise(promise)) {
          cache[id] = promise;
          conf.emit("setasync", id, 1);
          return;
        }
        waiting[id] = 1;
        promises[id] = promise;
        var onSuccess = function(result) {
          var count = waiting[id];
          if (isFailed) {
            throw new Error(
              "Memoizee error: Detected unordered then|done & finally resolution, which in turn makes proper detection of success/failure impossible (when in 'done:finally' mode)\nConsider to rely on 'then' or 'done' mode instead."
            );
          }
          if (!count)
            return;
          delete waiting[id];
          cache[id] = result;
          conf.emit("setasync", id, count);
        };
        var onFailure = function() {
          isFailed = true;
          if (!waiting[id])
            return;
          delete waiting[id];
          delete promises[id];
          conf.delete(id);
        };
        var resolvedMode = mode;
        if (!resolvedMode)
          resolvedMode = "then";
        if (resolvedMode === "then") {
          var nextTickFailure = function() {
            nextTick(onFailure);
          };
          promise = promise.then(function(result) {
            nextTick(onSuccess.bind(this, result));
          }, nextTickFailure);
          if (typeof promise.finally === "function") {
            promise.finally(nextTickFailure);
          }
        } else if (resolvedMode === "done") {
          if (typeof promise.done !== "function") {
            throw new Error(
              "Memoizee error: Retrieved promise does not implement 'done' in 'done' mode"
            );
          }
          promise.done(onSuccess, onFailure);
        } else if (resolvedMode === "done:finally") {
          if (typeof promise.done !== "function") {
            throw new Error(
              "Memoizee error: Retrieved promise does not implement 'done' in 'done:finally' mode"
            );
          }
          if (typeof promise.finally !== "function") {
            throw new Error(
              "Memoizee error: Retrieved promise does not implement 'finally' in 'done:finally' mode"
            );
          }
          promise.done(onSuccess);
          promise.finally(onFailure);
        }
      });
      conf.on("get", function(id, args, context) {
        var promise;
        if (waiting[id]) {
          ++waiting[id];
          return;
        }
        promise = promises[id];
        var emit = function() {
          conf.emit("getasync", id, args, context);
        };
        if (isPromise(promise)) {
          if (typeof promise.done === "function")
            promise.done(emit);
          else {
            promise.then(function() {
              nextTick(emit);
            });
          }
        } else {
          emit();
        }
      });
      conf.on("delete", function(id) {
        delete promises[id];
        if (waiting[id]) {
          delete waiting[id];
          return;
        }
        if (!hasOwnProperty.call(cache, id))
          return;
        var result = cache[id];
        delete cache[id];
        conf.emit("deleteasync", id, [result]);
      });
      conf.on("clear", function() {
        var oldCache = cache;
        cache = create(null);
        waiting = create(null);
        promises = create(null);
        conf.emit("clearasync", objectMap(oldCache, function(data) {
          return [data];
        }));
      });
    };
  }
});

// node_modules/memoizee/ext/dispose.js
var require_dispose = __commonJS({
  "node_modules/memoizee/ext/dispose.js"() {
    "use strict";
    var callable = require_valid_callable();
    var forEach = require_for_each();
    var extensions = require_registered_extensions();
    var apply = Function.prototype.apply;
    extensions.dispose = function(dispose, conf, options) {
      var del;
      callable(dispose);
      if (options.async && extensions.async || options.promise && extensions.promise) {
        conf.on("deleteasync", del = function(id, resultArray) {
          apply.call(dispose, null, resultArray);
        });
        conf.on("clearasync", function(cache) {
          forEach(cache, function(result, id) {
            del(id, result);
          });
        });
        return;
      }
      conf.on("delete", del = function(id, result) {
        dispose(result);
      });
      conf.on("clear", function(cache) {
        forEach(cache, function(result, id) {
          del(id, result);
        });
      });
    };
  }
});

// node_modules/timers-ext/max-timeout.js
var require_max_timeout = __commonJS({
  "node_modules/timers-ext/max-timeout.js"(exports, module) {
    "use strict";
    module.exports = 2147483647;
  }
});

// node_modules/timers-ext/valid-timeout.js
var require_valid_timeout = __commonJS({
  "node_modules/timers-ext/valid-timeout.js"(exports, module) {
    "use strict";
    var toPosInt = require_to_pos_integer();
    var maxTimeout = require_max_timeout();
    module.exports = function(value) {
      value = toPosInt(value);
      if (value > maxTimeout)
        throw new TypeError(value + " exceeds maximum possible timeout");
      return value;
    };
  }
});

// node_modules/memoizee/ext/max-age.js
var require_max_age = __commonJS({
  "node_modules/memoizee/ext/max-age.js"() {
    "use strict";
    var aFrom = require_from();
    var forEach = require_for_each();
    var nextTick = require_next_tick();
    var isPromise = require_is_promise();
    var timeout = require_valid_timeout();
    var extensions = require_registered_extensions();
    var noop = Function.prototype;
    var max = Math.max;
    var min = Math.min;
    var create = Object.create;
    extensions.maxAge = function(maxAge, conf, options) {
      var timeouts, postfix, preFetchAge, preFetchTimeouts;
      maxAge = timeout(maxAge);
      if (!maxAge)
        return;
      timeouts = create(null);
      postfix = options.async && extensions.async || options.promise && extensions.promise ? "async" : "";
      conf.on("set" + postfix, function(id) {
        timeouts[id] = setTimeout(function() {
          conf.delete(id);
        }, maxAge);
        if (typeof timeouts[id].unref === "function")
          timeouts[id].unref();
        if (!preFetchTimeouts)
          return;
        if (preFetchTimeouts[id]) {
          if (preFetchTimeouts[id] !== "nextTick")
            clearTimeout(preFetchTimeouts[id]);
        }
        preFetchTimeouts[id] = setTimeout(function() {
          delete preFetchTimeouts[id];
        }, preFetchAge);
        if (typeof preFetchTimeouts[id].unref === "function")
          preFetchTimeouts[id].unref();
      });
      conf.on("delete" + postfix, function(id) {
        clearTimeout(timeouts[id]);
        delete timeouts[id];
        if (!preFetchTimeouts)
          return;
        if (preFetchTimeouts[id] !== "nextTick")
          clearTimeout(preFetchTimeouts[id]);
        delete preFetchTimeouts[id];
      });
      if (options.preFetch) {
        if (options.preFetch === true || isNaN(options.preFetch)) {
          preFetchAge = 0.333;
        } else {
          preFetchAge = max(min(Number(options.preFetch), 1), 0);
        }
        if (preFetchAge) {
          preFetchTimeouts = {};
          preFetchAge = (1 - preFetchAge) * maxAge;
          conf.on("get" + postfix, function(id, args, context) {
            if (!preFetchTimeouts[id]) {
              preFetchTimeouts[id] = "nextTick";
              nextTick(function() {
                var result;
                if (preFetchTimeouts[id] !== "nextTick")
                  return;
                delete preFetchTimeouts[id];
                conf.delete(id);
                if (options.async) {
                  args = aFrom(args);
                  args.push(noop);
                }
                result = conf.memoized.apply(context, args);
                if (options.promise) {
                  if (isPromise(result)) {
                    if (typeof result.done === "function")
                      result.done(noop, noop);
                    else
                      result.then(noop, noop);
                  }
                }
              });
            }
          });
        }
      }
      conf.on("clear" + postfix, function() {
        forEach(timeouts, function(id) {
          clearTimeout(id);
        });
        timeouts = {};
        if (preFetchTimeouts) {
          forEach(preFetchTimeouts, function(id) {
            if (id !== "nextTick")
              clearTimeout(id);
          });
          preFetchTimeouts = {};
        }
      });
    };
  }
});

// node_modules/lru-queue/index.js
var require_lru_queue = __commonJS({
  "node_modules/lru-queue/index.js"(exports, module) {
    "use strict";
    var toPosInt = require_to_pos_integer();
    var create = Object.create;
    var hasOwnProperty2 = Object.prototype.hasOwnProperty;
    module.exports = function(limit) {
      var size = 0, base = 1, queue = create(null), map = create(null), index = 0, del;
      limit = toPosInt(limit);
      return {
        hit: function(id) {
          var oldIndex = map[id], nuIndex = ++index;
          queue[nuIndex] = id;
          map[id] = nuIndex;
          if (!oldIndex) {
            ++size;
            if (size <= limit)
              return;
            id = queue[base];
            del(id);
            return id;
          }
          delete queue[oldIndex];
          if (base !== oldIndex)
            return;
          while (!hasOwnProperty2.call(queue, ++base))
            continue;
        },
        delete: del = function(id) {
          var oldIndex = map[id];
          if (!oldIndex)
            return;
          delete queue[oldIndex];
          delete map[id];
          --size;
          if (base !== oldIndex)
            return;
          if (!size) {
            index = 0;
            base = 1;
            return;
          }
          while (!hasOwnProperty2.call(queue, ++base))
            continue;
        },
        clear: function() {
          size = 0;
          base = 1;
          queue = create(null);
          map = create(null);
          index = 0;
        }
      };
    };
  }
});

// node_modules/memoizee/ext/max.js
var require_max = __commonJS({
  "node_modules/memoizee/ext/max.js"() {
    "use strict";
    var toPosInteger = require_to_pos_integer();
    var lruQueue = require_lru_queue();
    var extensions = require_registered_extensions();
    extensions.max = function(max, conf, options) {
      var postfix, queue, hit;
      max = toPosInteger(max);
      if (!max)
        return;
      queue = lruQueue(max);
      postfix = options.async && extensions.async || options.promise && extensions.promise ? "async" : "";
      conf.on("set" + postfix, hit = function(id) {
        id = queue.hit(id);
        if (id === void 0)
          return;
        conf.delete(id);
      });
      conf.on("get" + postfix, hit);
      conf.on("delete" + postfix, queue.delete);
      conf.on("clear" + postfix, queue.clear);
    };
  }
});

// node_modules/memoizee/ext/ref-counter.js
var require_ref_counter = __commonJS({
  "node_modules/memoizee/ext/ref-counter.js"() {
    "use strict";
    var d = require_d();
    var extensions = require_registered_extensions();
    var create = Object.create;
    var defineProperties = Object.defineProperties;
    extensions.refCounter = function(ignore, conf, options) {
      var cache, postfix;
      cache = create(null);
      postfix = options.async && extensions.async || options.promise && extensions.promise ? "async" : "";
      conf.on("set" + postfix, function(id, length) {
        cache[id] = length || 1;
      });
      conf.on("get" + postfix, function(id) {
        ++cache[id];
      });
      conf.on("delete" + postfix, function(id) {
        delete cache[id];
      });
      conf.on("clear" + postfix, function() {
        cache = {};
      });
      defineProperties(conf.memoized, {
        deleteRef: d(function() {
          var id = conf.get(arguments);
          if (id === null)
            return null;
          if (!cache[id])
            return null;
          if (!--cache[id]) {
            conf.delete(id);
            return true;
          }
          return false;
        }),
        getRefCount: d(function() {
          var id = conf.get(arguments);
          if (id === null)
            return 0;
          if (!cache[id])
            return 0;
          return cache[id];
        })
      });
    };
  }
});

// node_modules/memoizee/index.js
var require_memoizee = __commonJS({
  "node_modules/memoizee/index.js"(exports, module) {
    "use strict";
    var normalizeOpts = require_normalize_options();
    var resolveLength = require_resolve_length();
    var plain = require_plain();
    module.exports = function(fn) {
      var options = normalizeOpts(arguments[1]), length;
      if (!options.normalizer) {
        length = options.length = resolveLength(options.length, fn.length, options.async);
        if (length !== 0) {
          if (options.primitive) {
            if (length === false) {
              options.normalizer = require_primitive();
            } else if (length > 1) {
              options.normalizer = require_get_primitive_fixed()(length);
            }
          } else if (length === false)
            options.normalizer = require_get()();
          else if (length === 1)
            options.normalizer = require_get_1()();
          else
            options.normalizer = require_get_fixed()(length);
        }
      }
      if (options.async)
        require_async();
      if (options.promise)
        require_promise();
      if (options.dispose)
        require_dispose();
      if (options.maxAge)
        require_max_age();
      if (options.max)
        require_max();
      if (options.refCounter)
        require_ref_counter();
      return plain(fn, options);
    };
  }
});

// node_modules/type/string/coerce.js
var require_coerce = __commonJS({
  "node_modules/type/string/coerce.js"(exports, module) {
    "use strict";
    var isValue = require_is();
    var isObject = require_is2();
    var objectToString = Object.prototype.toString;
    module.exports = function(value) {
      if (!isValue(value))
        return null;
      if (isObject(value)) {
        var valueToString = value.toString;
        if (typeof valueToString !== "function")
          return null;
        if (valueToString === objectToString)
          return null;
      }
      try {
        return "" + value;
      } catch (error) {
        return null;
      }
    };
  }
});

// node_modules/type/lib/safe-to-string.js
var require_safe_to_string2 = __commonJS({
  "node_modules/type/lib/safe-to-string.js"(exports, module) {
    "use strict";
    module.exports = function(value) {
      try {
        return value.toString();
      } catch (error) {
        try {
          return String(value);
        } catch (error2) {
          return null;
        }
      }
    };
  }
});

// node_modules/type/lib/to-short-string.js
var require_to_short_string = __commonJS({
  "node_modules/type/lib/to-short-string.js"(exports, module) {
    "use strict";
    var safeToString = require_safe_to_string2();
    var reNewLine = /[\n\r\u2028\u2029]/g;
    module.exports = function(value) {
      var string = safeToString(value);
      if (string === null)
        return "<Non-coercible to string value>";
      if (string.length > 100)
        string = string.slice(0, 99) + "\u2026";
      string = string.replace(reNewLine, function(char) {
        switch (char) {
          case "\n":
            return "\\n";
          case "\r":
            return "\\r";
          case "\u2028":
            return "\\u2028";
          case "\u2029":
            return "\\u2029";
          default:
            throw new Error("Unexpected character");
        }
      });
      return string;
    };
  }
});

// node_modules/type/lib/resolve-exception.js
var require_resolve_exception = __commonJS({
  "node_modules/type/lib/resolve-exception.js"(exports, module) {
    "use strict";
    var isValue = require_is();
    var isObject = require_is2();
    var stringCoerce = require_coerce();
    var toShortString = require_to_short_string();
    var resolveMessage = function(message, value) {
      return message.replace("%v", toShortString(value));
    };
    module.exports = function(value, defaultMessage, inputOptions) {
      if (!isObject(inputOptions))
        throw new TypeError(resolveMessage(defaultMessage, value));
      if (!isValue(value)) {
        if ("default" in inputOptions)
          return inputOptions["default"];
        if (inputOptions.isOptional)
          return null;
      }
      var errorMessage = stringCoerce(inputOptions.errorMessage);
      if (!isValue(errorMessage))
        errorMessage = defaultMessage;
      throw new TypeError(resolveMessage(errorMessage, value));
    };
  }
});

// node_modules/type/value/ensure.js
var require_ensure = __commonJS({
  "node_modules/type/value/ensure.js"(exports, module) {
    "use strict";
    var resolveException = require_resolve_exception();
    var is = require_is();
    module.exports = function(value) {
      if (is(value))
        return value;
      return resolveException(value, "Cannot use %v", arguments[1]);
    };
  }
});

// node_modules/d/lazy.js
var require_lazy = __commonJS({
  "node_modules/d/lazy.js"(exports, module) {
    "use strict";
    var isPlainFunction = require_is5();
    var ensureValue = require_ensure();
    var isValue = require_is();
    var map = require_map();
    var contains = require_contains();
    var call = Function.prototype.call;
    var defineProperty = Object.defineProperty;
    var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
    var getPrototypeOf = Object.getPrototypeOf;
    var hasOwnProperty2 = Object.prototype.hasOwnProperty;
    var cacheDesc = { configurable: false, enumerable: false, writable: false, value: null };
    var define;
    define = function(name, options) {
      var value, dgs, cacheName, desc, writable = false, resolvable, flat;
      options = Object(ensureValue(options));
      cacheName = options.cacheName;
      flat = options.flat;
      if (!isValue(cacheName))
        cacheName = name;
      delete options.cacheName;
      value = options.value;
      resolvable = isPlainFunction(value);
      delete options.value;
      dgs = { configurable: Boolean(options.configurable), enumerable: Boolean(options.enumerable) };
      if (name !== cacheName) {
        dgs.get = function() {
          if (hasOwnProperty2.call(this, cacheName))
            return this[cacheName];
          cacheDesc.value = resolvable ? call.call(value, this, options) : value;
          cacheDesc.writable = writable;
          defineProperty(this, cacheName, cacheDesc);
          cacheDesc.value = null;
          if (desc)
            defineProperty(this, name, desc);
          return this[cacheName];
        };
      } else if (!flat) {
        dgs.get = function self2() {
          var ownDesc;
          if (hasOwnProperty2.call(this, name)) {
            ownDesc = getOwnPropertyDescriptor(this, name);
            if (ownDesc) {
              if (ownDesc.hasOwnProperty("value"))
                return ownDesc.value;
              if (typeof ownDesc.get === "function" && ownDesc.get !== self2) {
                return ownDesc.get.call(this);
              }
              return value;
            }
          }
          desc.value = resolvable ? call.call(value, this, options) : value;
          defineProperty(this, name, desc);
          desc.value = null;
          return this[name];
        };
      } else {
        dgs.get = function self2() {
          var base = this, ownDesc;
          if (hasOwnProperty2.call(this, name)) {
            ownDesc = getOwnPropertyDescriptor(this, name);
            if (ownDesc.hasOwnProperty("value"))
              return ownDesc.value;
            if (typeof ownDesc.get === "function" && ownDesc.get !== self2) {
              return ownDesc.get.call(this);
            }
          }
          while (!hasOwnProperty2.call(base, name))
            base = getPrototypeOf(base);
          desc.value = resolvable ? call.call(value, base, options) : value;
          defineProperty(base, name, desc);
          desc.value = null;
          return base[name];
        };
      }
      dgs.set = function(value2) {
        if (hasOwnProperty2.call(this, name)) {
          throw new TypeError("Cannot assign to lazy defined '" + name + "' property of " + this);
        }
        dgs.get.call(this);
        this[cacheName] = value2;
      };
      if (options.desc) {
        desc = {
          configurable: contains.call(options.desc, "c"),
          enumerable: contains.call(options.desc, "e")
        };
        if (cacheName === name) {
          desc.writable = contains.call(options.desc, "w");
          desc.value = null;
        } else {
          writable = contains.call(options.desc, "w");
          desc.get = dgs.get;
          desc.set = dgs.set;
        }
        delete options.desc;
      } else if (cacheName === name) {
        desc = {
          configurable: Boolean(options.configurable),
          enumerable: Boolean(options.enumerable),
          writable: Boolean(options.writable),
          value: null
        };
      }
      delete options.configurable;
      delete options.enumerable;
      delete options.writable;
      return dgs;
    };
    module.exports = function(props) {
      return map(props, function(desc, name) {
        return define(name, desc);
      });
    };
  }
});

// node_modules/memoizee/lib/methods.js
var require_methods = __commonJS({
  "node_modules/memoizee/lib/methods.js"(exports, module) {
    "use strict";
    var forEach = require_for_each();
    var normalizeOpts = require_normalize_options();
    var callable = require_valid_callable();
    var lazy = require_lazy();
    var resolveLength = require_resolve_length();
    var extensions = require_registered_extensions();
    module.exports = function(memoize) {
      return function(props) {
        forEach(props, function(desc) {
          var fn = callable(desc.value), length;
          desc.value = function(options) {
            if (options.getNormalizer) {
              options = normalizeOpts(options);
              if (length === void 0) {
                length = resolveLength(
                  options.length,
                  fn.length,
                  options.async && extensions.async
                );
              }
              options.normalizer = options.getNormalizer(length);
              delete options.getNormalizer;
            }
            return memoize(fn.bind(this), options);
          };
        });
        return lazy(props);
      };
    };
  }
});

// node_modules/memoizee/methods.js
var require_methods2 = __commonJS({
  "node_modules/memoizee/methods.js"(exports, module) {
    "use strict";
    module.exports = require_methods()(require_memoizee());
  }
});

// node_modules/es5-ext/object/first-key.js
var require_first_key = __commonJS({
  "node_modules/es5-ext/object/first-key.js"(exports, module) {
    "use strict";
    var value = require_valid_value();
    var objPropertyIsEnumerable = Object.prototype.propertyIsEnumerable;
    module.exports = function(obj) {
      var i;
      value(obj);
      for (i in obj) {
        if (objPropertyIsEnumerable.call(obj, i))
          return i;
      }
      return null;
    };
  }
});

// node_modules/es5-ext/array/#/for-each-right.js
var require_for_each_right = __commonJS({
  "node_modules/es5-ext/array/#/for-each-right.js"(exports, module) {
    "use strict";
    var toPosInt = require_to_pos_integer();
    var callable = require_valid_callable();
    var value = require_valid_value();
    var objHasOwnProperty = Object.prototype.hasOwnProperty;
    var call = Function.prototype.call;
    module.exports = function(cb) {
      var i, self2, thisArg;
      self2 = Object(value(this));
      callable(cb);
      thisArg = arguments[1];
      for (i = toPosInt(self2.length) - 1; i >= 0; --i) {
        if (objHasOwnProperty.call(self2, i))
          call.call(cb, thisArg, self2[i], i, self2);
      }
    };
  }
});

// node_modules/es5-ext/array/#/uniq.js
var require_uniq = __commonJS({
  "node_modules/es5-ext/array/#/uniq.js"(exports, module) {
    "use strict";
    var indexOf = require_e_index_of();
    var filter = Array.prototype.filter;
    var isFirst;
    isFirst = function(value, index) {
      return indexOf.call(this, value) === index;
    };
    module.exports = function() {
      return filter.call(this, isFirst, this);
    };
  }
});

// node_modules/cli-color/lib/sgr.js
var require_sgr = __commonJS({
  "node_modules/cli-color/lib/sgr.js"(exports, module) {
    "use strict";
    var assign = require_assign();
    var includes = require_contains();
    var forOwn = require_for_each();
    var onlyKey = require_first_key();
    var forEachRight = require_for_each_right();
    var uniq = require_uniq();
    var CSI = "\x1B[";
    var sgr = function(code) {
      return CSI + code + "m";
    };
    sgr.CSI = CSI;
    var mods = assign(
      {
        bold: { _bold: [1, 22] },
        italic: { _italic: [3, 23] },
        underline: { _underline: [4, 24] },
        blink: { _blink: [5, 25] },
        inverse: { _inverse: [7, 27] },
        strike: { _strike: [9, 29] }
      },
      ["black", "red", "green", "yellow", "blue", "magenta", "cyan", "white"].reduce(function(obj, color, index) {
        obj[color] = { _fg: [30 + index, 39] };
        obj[color + "Bright"] = { _fg: [90 + index, 39] };
        obj["bg" + color[0].toUpperCase() + color.slice(1)] = { _bg: [40 + index, 49] };
        obj["bg" + color[0].toUpperCase() + color.slice(1) + "Bright"] = { _bg: [100 + index, 49] };
        return obj;
      }, {})
    );
    sgr.mods = mods;
    sgr.openers = {};
    sgr.closers = {};
    forOwn(mods, function(mod) {
      var modPair = mod[onlyKey(mod)];
      sgr.openers[modPair[0]] = modPair;
      sgr.closers[modPair[1]] = modPair;
    });
    sgr.openStyle = function(openedMods, code) {
      openedMods.push(sgr.openers[code]);
    };
    sgr.closeStyle = function(openedMods, code) {
      forEachRight.call(openedMods, function(modPair, index) {
        if (modPair[1] === code) {
          openedMods.splice(index, 1);
        }
      });
    };
    sgr.prepend = function(currentMods) {
      return currentMods.map(function(modPair) {
        return sgr(modPair[0]);
      });
    };
    sgr.complete = function(openedMods, closerCodes) {
      closerCodes.forEach(function(code) {
        sgr.closeStyle(openedMods, code);
      });
      openedMods = openedMods.reverse();
      openedMods = openedMods.map(function(modPair) {
        return modPair[1];
      });
      openedMods = uniq.call(openedMods);
      return openedMods.map(sgr);
    };
    var hasCSI = function(str) {
      return includes.call(str, CSI);
    };
    sgr.hasCSI = hasCSI;
    var extractCode = function(csi) {
      var code = csi.slice(2, -1);
      code = Number(code);
      return code;
    };
    sgr.extractCode = extractCode;
    module.exports = sgr;
  }
});

// node_modules/cli-color/lib/supports-color.js
var require_supports_color = __commonJS({
  "node_modules/cli-color/lib/supports-color.js"(exports, module) {
    "use strict";
    var state = null;
    var enableColor = function() {
      state = true;
    };
    var disableColor = function() {
      state = false;
    };
    var autoDetectSupport = function() {
      state = null;
    };
    var isColorSupported = function() {
      return state === null ? !process.env.NO_COLOR : state;
    };
    module.exports = {
      enableColor,
      disableColor,
      autoDetectSupport,
      isColorSupported
    };
  }
});

// node_modules/cli-color/lib/xterm-colors.js
var require_xterm_colors = __commonJS({
  "node_modules/cli-color/lib/xterm-colors.js"(exports, module) {
    "use strict";
    module.exports = [
      "000000",
      "800000",
      "008000",
      "808000",
      "000080",
      "800080",
      "008080",
      "c0c0c0",
      "808080",
      "ff0000",
      "00ff00",
      "ffff00",
      "0000ff",
      "ff00ff",
      "00ffff",
      "ffffff",
      "000000",
      "00005f",
      "000087",
      "0000af",
      "0000d7",
      "0000ff",
      "005f00",
      "005f5f",
      "005f87",
      "005faf",
      "005fd7",
      "005fff",
      "008700",
      "00875f",
      "008787",
      "0087af",
      "0087d7",
      "0087ff",
      "00af00",
      "00af5f",
      "00af87",
      "00afaf",
      "00afd7",
      "00afff",
      "00d700",
      "00d75f",
      "00d787",
      "00d7af",
      "00d7d7",
      "00d7ff",
      "00ff00",
      "00ff5f",
      "00ff87",
      "00ffaf",
      "00ffd7",
      "00ffff",
      "5f0000",
      "5f005f",
      "5f0087",
      "5f00af",
      "5f00d7",
      "5f00ff",
      "5f5f00",
      "5f5f5f",
      "5f5f87",
      "5f5faf",
      "5f5fd7",
      "5f5fff",
      "5f8700",
      "5f875f",
      "5f8787",
      "5f87af",
      "5f87d7",
      "5f87ff",
      "5faf00",
      "5faf5f",
      "5faf87",
      "5fafaf",
      "5fafd7",
      "5fafff",
      "5fd700",
      "5fd75f",
      "5fd787",
      "5fd7af",
      "5fd7d7",
      "5fd7ff",
      "5fff00",
      "5fff5f",
      "5fff87",
      "5fffaf",
      "5fffd7",
      "5fffff",
      "870000",
      "87005f",
      "870087",
      "8700af",
      "8700d7",
      "8700ff",
      "875f00",
      "875f5f",
      "875f87",
      "875faf",
      "875fd7",
      "875fff",
      "878700",
      "87875f",
      "878787",
      "8787af",
      "8787d7",
      "8787ff",
      "87af00",
      "87af5f",
      "87af87",
      "87afaf",
      "87afd7",
      "87afff",
      "87d700",
      "87d75f",
      "87d787",
      "87d7af",
      "87d7d7",
      "87d7ff",
      "87ff00",
      "87ff5f",
      "87ff87",
      "87ffaf",
      "87ffd7",
      "87ffff",
      "af0000",
      "af005f",
      "af0087",
      "af00af",
      "af00d7",
      "af00ff",
      "af5f00",
      "af5f5f",
      "af5f87",
      "af5faf",
      "af5fd7",
      "af5fff",
      "af8700",
      "af875f",
      "af8787",
      "af87af",
      "af87d7",
      "af87ff",
      "afaf00",
      "afaf5f",
      "afaf87",
      "afafaf",
      "afafd7",
      "afafff",
      "afd700",
      "afd75f",
      "afd787",
      "afd7af",
      "afd7d7",
      "afd7ff",
      "afff00",
      "afff5f",
      "afff87",
      "afffaf",
      "afffd7",
      "afffff",
      "d70000",
      "d7005f",
      "d70087",
      "d700af",
      "d700d7",
      "d700ff",
      "d75f00",
      "d75f5f",
      "d75f87",
      "d75faf",
      "d75fd7",
      "d75fff",
      "d78700",
      "d7875f",
      "d78787",
      "d787af",
      "d787d7",
      "d787ff",
      "d7af00",
      "d7af5f",
      "d7af87",
      "d7afaf",
      "d7afd7",
      "d7afff",
      "d7d700",
      "d7d75f",
      "d7d787",
      "d7d7af",
      "d7d7d7",
      "d7d7ff",
      "d7ff00",
      "d7ff5f",
      "d7ff87",
      "d7ffaf",
      "d7ffd7",
      "d7ffff",
      "ff0000",
      "ff005f",
      "ff0087",
      "ff00af",
      "ff00d7",
      "ff00ff",
      "ff5f00",
      "ff5f5f",
      "ff5f87",
      "ff5faf",
      "ff5fd7",
      "ff5fff",
      "ff8700",
      "ff875f",
      "ff8787",
      "ff87af",
      "ff87d7",
      "ff87ff",
      "ffaf00",
      "ffaf5f",
      "ffaf87",
      "ffafaf",
      "ffafd7",
      "ffafff",
      "ffd700",
      "ffd75f",
      "ffd787",
      "ffd7af",
      "ffd7d7",
      "ffd7ff",
      "ffff00",
      "ffff5f",
      "ffff87",
      "ffffaf",
      "ffffd7",
      "ffffff",
      "080808",
      "121212",
      "1c1c1c",
      "262626",
      "303030",
      "3a3a3a",
      "444444",
      "4e4e4e",
      "585858",
      "626262",
      "6c6c6c",
      "767676",
      "808080",
      "8a8a8a",
      "949494",
      "9e9e9e",
      "a8a8a8",
      "b2b2b2",
      "bcbcbc",
      "c6c6c6",
      "d0d0d0",
      "dadada",
      "e4e4e4",
      "eeeeee"
    ];
  }
});

// node_modules/cli-color/lib/xterm-match.js
var require_xterm_match = __commonJS({
  "node_modules/cli-color/lib/xterm-match.js"(exports, module) {
    "use strict";
    var push = Array.prototype.push;
    var reduce = Array.prototype.reduce;
    var abs = Math.abs;
    var colors;
    var match;
    var result;
    var i;
    colors = require_xterm_colors().map(function(color) {
      return {
        r: parseInt(color.slice(0, 2), 16),
        g: parseInt(color.slice(2, 4), 16),
        b: parseInt(color.slice(4), 16)
      };
    });
    match = colors.slice(0, 16);
    module.exports = result = [];
    i = 0;
    while (i < 8) {
      result.push(30 + i++);
    }
    i = 0;
    while (i < 8) {
      result.push(90 + i++);
    }
    push.apply(
      result,
      colors.slice(16).map(function(data) {
        var index, diff = Infinity;
        match.every(function(innerMatch, currentIndex) {
          var ndiff = reduce.call(
            "rgb",
            function(currentDiff, channel) {
              currentDiff += abs(innerMatch[channel] - data[channel]);
              return currentDiff;
            },
            0
          );
          if (ndiff < diff) {
            index = currentIndex;
            diff = ndiff;
          }
          return ndiff;
        });
        return result[index];
      })
    );
  }
});

// node_modules/cli-color/bare.js
var require_bare = __commonJS({
  "node_modules/cli-color/bare.js"(exports, module) {
    "use strict";
    var d = require_d();
    var assign = require_assign();
    var forEach = require_for_each();
    var map = require_map();
    var primitiveSet = require_primitive_set();
    var setPrototypeOf = require_set_prototype_of();
    var memoize = require_memoizee();
    var memoizeMethods = require_methods2();
    var sgr = require_sgr();
    var supportsColor = require_supports_color();
    var mods = sgr.mods;
    var join = Array.prototype.join;
    var defineProperty = Object.defineProperty;
    var max = Math.max;
    var min = Math.min;
    var variantModes = primitiveSet("_fg", "_bg");
    var xtermMatch = process.platform === "win32" ? require_xterm_match() : null;
    var getFn;
    var memoized = memoize(function(scope, mod) {
      return defineProperty(getFn(), "_cliColorData", d(assign({}, scope._cliColorData, mod)));
    });
    var proto = Object.create(
      Function.prototype,
      assign(
        map(mods, function(mod) {
          return d.gs(function() {
            return memoized(this, mod);
          });
        }),
        memoizeMethods({
          xterm: d(function(code) {
            code = isNaN(code) ? 255 : min(max(code, 0), 255);
            return defineProperty(
              getFn(),
              "_cliColorData",
              d(
                assign({}, this._cliColorData, {
                  _fg: [xtermMatch ? xtermMatch[code] : "38;5;" + code, 39]
                })
              )
            );
          }),
          bgXterm: d(function(code) {
            code = isNaN(code) ? 255 : min(max(code, 0), 255);
            return defineProperty(
              getFn(),
              "_cliColorData",
              d(
                assign({}, this._cliColorData, {
                  _bg: [xtermMatch ? xtermMatch[code] + 10 : "48;5;" + code, 49]
                })
              )
            );
          })
        })
      )
    );
    var getEndRe = memoize(function(code) {
      return new RegExp("\x1B\\[" + code + "m", "g");
    }, {
      primitive: true
    });
    getFn = function() {
      return setPrototypeOf(
        function self2() {
          var start = "", end = "", msg = join.call(arguments, " "), conf = self2._cliColorData, hasAnsi = sgr.hasCSI(msg);
          forEach(
            conf,
            function(mod, key) {
              end = sgr(mod[1]) + end;
              start += sgr(mod[0]);
              if (hasAnsi) {
                msg = msg.replace(getEndRe(mod[1]), variantModes[key] ? sgr(mod[0]) : "");
              }
            },
            null,
            true
          );
          if (!supportsColor.isColorSupported())
            return msg;
          return start + msg + end;
        },
        proto
      );
    };
    module.exports = Object.defineProperties(getFn(), {
      xtermSupported: d(!xtermMatch),
      _cliColorData: d("", {})
    });
  }
});

// node_modules/cli-color/window-size.js
var require_window_size = __commonJS({
  "node_modules/cli-color/window-size.js"(exports) {
    "use strict";
    var d = require_d();
    Object.defineProperties(exports, {
      width: d.gs("ce", function() {
        return process.stdout.columns || 0;
      }),
      height: d.gs("ce", function() {
        return process.stdout.rows || 0;
      })
    });
  }
});

// node_modules/cli-color/erase.js
var require_erase = __commonJS({
  "node_modules/cli-color/erase.js"(exports, module) {
    "use strict";
    module.exports = {
      screen: "\x1B[2J",
      screenLeft: "\x1B[1J",
      screenRight: "\x1B[J",
      line: "\x1B[2K",
      lineLeft: "\x1B[1K",
      lineRight: "\x1B[K"
    };
  }
});

// node_modules/es5-ext/math/trunc/is-implemented.js
var require_is_implemented10 = __commonJS({
  "node_modules/es5-ext/math/trunc/is-implemented.js"(exports, module) {
    "use strict";
    module.exports = function() {
      var trunc = Math.trunc;
      if (typeof trunc !== "function")
        return false;
      return trunc(13.67) === 13 && trunc(-13.67) === -13;
    };
  }
});

// node_modules/es5-ext/math/trunc/shim.js
var require_shim8 = __commonJS({
  "node_modules/es5-ext/math/trunc/shim.js"(exports, module) {
    "use strict";
    var floor = Math.floor;
    module.exports = function(value) {
      if (isNaN(value))
        return NaN;
      value = Number(value);
      if (value === 0)
        return value;
      if (value === Infinity)
        return Infinity;
      if (value === -Infinity)
        return -Infinity;
      if (value > 0)
        return floor(value);
      return -floor(-value);
    };
  }
});

// node_modules/es5-ext/math/trunc/index.js
var require_trunc = __commonJS({
  "node_modules/es5-ext/math/trunc/index.js"(exports, module) {
    "use strict";
    module.exports = require_is_implemented10()() ? Math.trunc : require_shim8();
  }
});

// node_modules/cli-color/move.js
var require_move = __commonJS({
  "node_modules/cli-color/move.js"(exports, module) {
    "use strict";
    var d = require_d();
    var trunc = require_trunc();
    var up;
    var down;
    var right;
    var left;
    var abs = Math.abs;
    var floor = Math.floor;
    var max = Math.max;
    var getMove = function(control) {
      return function(num) {
        num = isNaN(num) ? 0 : max(floor(num), 0);
        return num ? "\x1B[" + num + control : "";
      };
    };
    module.exports = Object.defineProperties(
      function(x, y) {
        x = isNaN(x) ? 0 : floor(x);
        y = isNaN(y) ? 0 : floor(y);
        return (x > 0 ? right(x) : left(-x)) + (y > 0 ? down(y) : up(-y));
      },
      {
        up: d(up = getMove("A")),
        down: d(down = getMove("B")),
        right: d(right = getMove("C")),
        left: d(left = getMove("D")),
        to: d(function(x, y) {
          x = isNaN(x) ? 1 : max(floor(x), 0) + 1;
          y = isNaN(y) ? 1 : max(floor(y), 0) + 1;
          return "\x1B[" + y + ";" + x + "H";
        }),
        lines: d(function(n) {
          var dir;
          n = trunc(n) || 0;
          dir = n >= 0 ? "B" : "A";
          n = floor(abs(n));
          return "\x1B[" + n + dir + "\x1B[1G";
        }),
        top: d("\x1B[5000F"),
        bottom: d("\x1B[5000B"),
        lineBegin: d("\x1B[5000D"),
        lineEnd: d("\x1B[5000C")
      }
    );
  }
});

// node_modules/cli-color/beep.js
var require_beep = __commonJS({
  "node_modules/cli-color/beep.js"(exports, module) {
    "use strict";
    module.exports = "\x07";
  }
});

// node_modules/es5-ext/array/generate.js
var require_generate = __commonJS({
  "node_modules/es5-ext/array/generate.js"(exports, module) {
    "use strict";
    var toPosInt = require_to_pos_integer();
    var value = require_valid_value();
    var slice = Array.prototype.slice;
    module.exports = function(length) {
      var arr, currentLength;
      length = toPosInt(value(length));
      if (length === 0)
        return [];
      arr = arguments.length < 2 ? [void 0] : slice.call(arguments, 1, 1 + length);
      while ((currentLength = arr.length) < length) {
        arr = arr.concat(arr.slice(0, length - currentLength));
      }
      return arr;
    };
  }
});

// node_modules/es5-ext/object/is-array-like.js
var require_is_array_like = __commonJS({
  "node_modules/es5-ext/object/is-array-like.js"(exports, module) {
    "use strict";
    var isFunction = require_is_function();
    var isObject = require_is_object();
    var isValue = require_is_value();
    module.exports = function(value) {
      return isValue(value) && typeof value.length === "number" && (isObject(value) && !isFunction(value) || typeof value === "string") || false;
    };
  }
});

// node_modules/es5-ext/iterable/is.js
var require_is6 = __commonJS({
  "node_modules/es5-ext/iterable/is.js"(exports, module) {
    "use strict";
    var iteratorSymbol = require_es6_symbol().iterator;
    var isValue = require_is_value();
    var isArrayLike = require_is_array_like();
    module.exports = function(value) {
      if (!isValue(value))
        return false;
      if (typeof value[iteratorSymbol] === "function")
        return true;
      return isArrayLike(value);
    };
  }
});

// node_modules/es5-ext/iterable/validate-object.js
var require_validate_object = __commonJS({
  "node_modules/es5-ext/iterable/validate-object.js"(exports, module) {
    "use strict";
    var isObject = require_is_object();
    var is = require_is6();
    module.exports = function(value) {
      if (is(value) && isObject(value))
        return value;
      throw new TypeError(value + " is not an iterable or array-like object");
    };
  }
});

// node_modules/es5-ext/string/#/repeat/is-implemented.js
var require_is_implemented11 = __commonJS({
  "node_modules/es5-ext/string/#/repeat/is-implemented.js"(exports, module) {
    "use strict";
    var str = "foo";
    module.exports = function() {
      if (typeof str.repeat !== "function")
        return false;
      return str.repeat(2) === "foofoo";
    };
  }
});

// node_modules/es5-ext/string/#/repeat/shim.js
var require_shim9 = __commonJS({
  "node_modules/es5-ext/string/#/repeat/shim.js"(exports, module) {
    "use strict";
    var value = require_valid_value();
    var toInteger = require_to_integer();
    module.exports = function(count) {
      var str = String(value(this)), result;
      count = toInteger(count);
      if (count < 0)
        throw new RangeError("Count must be >= 0");
      if (!isFinite(count))
        throw new RangeError("Count must be < \u221E");
      result = "";
      while (count) {
        if (count % 2)
          result += str;
        if (count > 1)
          str += str;
        count >>= 1;
      }
      return result;
    };
  }
});

// node_modules/es5-ext/string/#/repeat/index.js
var require_repeat = __commonJS({
  "node_modules/es5-ext/string/#/repeat/index.js"(exports, module) {
    "use strict";
    module.exports = require_is_implemented11()() ? String.prototype.repeat : require_shim9();
  }
});

// node_modules/cli-color/regex-ansi.js
var require_regex_ansi = __commonJS({
  "node_modules/cli-color/regex-ansi.js"(exports, module) {
    "use strict";
    module.exports = function() {
      return new RegExp(
        "[\\u001B\\u009B][[\\]()#;?]*(?:(?:(?:(?:;[-a-zA-Z\\d\\/#&.:=?%@~_]+)*|[a-zA-Z\\d]+(?:;[-a-zA-Z\\d\\/#&.:=?%@~_]*)*)?\\u0007)|(?:(?:\\d{1,4}(?:;\\d{0,4})*)?[\\dA-PR-TZcf-ntqry=><~]))",
        "g"
      );
    };
  }
});

// node_modules/cli-color/strip.js
var require_strip = __commonJS({
  "node_modules/cli-color/strip.js"(exports, module) {
    "use strict";
    var stringifiable = require_validate_stringifiable();
    var r = require_regex_ansi()();
    module.exports = function(str) {
      return stringifiable(str).replace(r, "");
    };
  }
});

// node_modules/cli-color/get-stripped-length.js
var require_get_stripped_length = __commonJS({
  "node_modules/cli-color/get-stripped-length.js"(exports, module) {
    "use strict";
    var strip = require_strip();
    module.exports = function(str) {
      return strip(str).length;
    };
  }
});

// node_modules/cli-color/columns.js
var require_columns = __commonJS({
  "node_modules/cli-color/columns.js"(exports, module) {
    "use strict";
    var generate = require_generate();
    var from = require_from();
    var iterable = require_validate_object();
    var isValue = require_is_value();
    var stringifiable = require_validate_stringifiable();
    var repeat = require_repeat();
    var getStrippedLength = require_get_stripped_length();
    var push = Array.prototype.push;
    module.exports = function(inputRows) {
      var options = Object(arguments[1]), colsMeta = [], colsOptions = options.columns || [], rows = [];
      from(iterable(inputRows), function(row) {
        var rowRows = [[]];
        from(iterable(row), function(cellStr, columnIndex) {
          var cellRows = stringifiable(cellStr).split("\n");
          while (cellRows.length > rowRows.length)
            rowRows.push(generate(columnIndex, ""));
          cellRows.forEach(function(cellRow, rowRowIndex) {
            rowRows[rowRowIndex][columnIndex] = cellRow;
          });
        });
        push.apply(rows, rowRows);
      });
      return rows.map(function(row) {
        return from(iterable(row), function(str, index) {
          var col = colsMeta[index], strLength;
          if (!col)
            col = colsMeta[index] = { width: 0 };
          str = stringifiable(str);
          strLength = getStrippedLength(str);
          if (strLength > col.width)
            col.width = strLength;
          return { str, length: strLength };
        });
      }).map(function(row) {
        return row.map(function(item, index) {
          var pad, align = "left", colOptions = colsOptions && colsOptions[index];
          align = colOptions && colOptions.align === "right" ? "right" : "left";
          pad = repeat.call(" ", colsMeta[index].width - item.length);
          if (align === "left")
            return item.str + pad;
          return pad + item.str;
        }).join(isValue(options.sep) ? options.sep : " | ");
      }).join("\n") + "\n";
    };
  }
});

// node_modules/cli-color/slice.js
var require_slice = __commonJS({
  "node_modules/cli-color/slice.js"(exports, module) {
    "use strict";
    var reAnsi = require_regex_ansi();
    var stringifiable = require_validate_stringifiable_value();
    var length = require_get_stripped_length();
    var sgr = require_sgr();
    var max = Math.max;
    var Token = function(token) {
      this.token = token;
    };
    var tokenize = function(str) {
      var match = reAnsi().exec(str);
      if (!match) {
        return [str];
      }
      var index = match.index, head, prehead, tail;
      if (index === 0) {
        head = match[0];
        tail = str.slice(head.length);
        return [new Token(head)].concat(tokenize(tail));
      }
      prehead = str.slice(0, index);
      head = match[0];
      tail = str.slice(index + head.length);
      return [prehead, new Token(head)].concat(tokenize(tail));
    };
    var isChunkInSlice = function(chunk, index, begin, end) {
      var endIndex = chunk.length + index;
      if (begin > endIndex)
        return false;
      if (end < index)
        return false;
      return true;
    };
    var sliceSeq = function(seq, begin, end) {
      var sliced = seq.reduce(
        function(state, chunk) {
          var index = state.index;
          if (chunk instanceof Token) {
            var code = sgr.extractCode(chunk.token);
            if (index <= begin) {
              if (code in sgr.openers) {
                sgr.openStyle(state.preOpeners, code);
              }
              if (code in sgr.closers) {
                sgr.closeStyle(state.preOpeners, code);
              }
            } else if (index < end) {
              if (code in sgr.openers) {
                sgr.openStyle(state.inOpeners, code);
                state.seq.push(chunk);
              } else if (code in sgr.closers) {
                state.inClosers.push(code);
                state.seq.push(chunk);
              }
            }
          } else {
            var nextChunk = "";
            if (isChunkInSlice(chunk, index, begin, end)) {
              var relBegin = Math.max(begin - index, 0), relEnd = Math.min(end - index, chunk.length);
              nextChunk = chunk.slice(relBegin, relEnd);
            }
            state.seq.push(nextChunk);
            state.index = index + chunk.length;
          }
          return state;
        },
        {
          index: 0,
          seq: [],
          preOpeners: [],
          inOpeners: [],
          inClosers: []
        }
      );
      sliced.seq = [].concat(
        sgr.prepend(sliced.preOpeners),
        sliced.seq,
        sgr.complete([].concat(sliced.preOpeners, sliced.inOpeners), sliced.inClosers)
      );
      return sliced.seq;
    };
    module.exports = function(str) {
      var seq, begin = Number(arguments[1]), end = Number(arguments[2]), len;
      str = stringifiable(str);
      len = length(str);
      if (isNaN(begin)) {
        begin = 0;
      }
      if (isNaN(end)) {
        end = len;
      }
      if (begin < 0) {
        begin = max(len + begin, 0);
      }
      if (end < 0) {
        end = max(len + end, 0);
      }
      seq = tokenize(str);
      seq = sliceSeq(seq, begin, end);
      return seq.map(function(chunk) {
        if (chunk instanceof Token) {
          return chunk.token;
        }
        return chunk;
      }).join("");
    };
  }
});

// node_modules/es5-ext/function/#/compose.js
var require_compose = __commonJS({
  "node_modules/es5-ext/function/#/compose.js"(exports, module) {
    "use strict";
    var isValue = require_is_value();
    var callable = require_valid_callable();
    var aFrom = require_from();
    var apply = Function.prototype.apply;
    var call = Function.prototype.call;
    var callFn = function(arg, fn) {
      return call.call(fn, this, arg);
    };
    module.exports = function(fnIgnored) {
      var fns, first;
      var args = aFrom(arguments);
      fns = isValue(this) ? [this].concat(args) : args;
      fns.forEach(callable);
      fns = fns.reverse();
      first = fns[0];
      fns = fns.slice(1);
      return function(argIgnored) {
        return fns.reduce(callFn, apply.call(first, this, arguments));
      };
    };
  }
});

// node_modules/cli-color/throbber.js
var require_throbber = __commonJS({
  "node_modules/cli-color/throbber.js"(exports, module) {
    "use strict";
    var compose = require_compose();
    var callable = require_valid_callable();
    var d = require_d();
    var validTimeout = require_valid_timeout();
    var chars = "-\\|/";
    var l = chars.length;
    var ThrobberIterator;
    ThrobberIterator = function() {
    };
    Object.defineProperties(ThrobberIterator.prototype, {
      index: d(-1),
      running: d(false),
      next: d(function() {
        var str = this.running ? "\b" : "";
        if (!this.running)
          this.running = true;
        return str + chars[this.index = (this.index + 1) % l];
      }),
      reset: d(function() {
        if (!this.running)
          return "";
        this.index = -1;
        this.running = false;
        return "\b";
      })
    });
    module.exports = exports = function(write, interval) {
      var format = arguments[2], token, iterator = new ThrobberIterator();
      callable(write);
      interval = validTimeout(interval);
      if (format !== void 0)
        write = compose.call(write, callable(format));
      return {
        start: function() {
          if (token)
            return;
          token = setInterval(function() {
            write(iterator.next());
          }, interval);
        },
        restart: function() {
          this.stop();
          this.start();
        },
        stop: function() {
          if (!token)
            return;
          clearInterval(token);
          token = null;
          write(iterator.reset());
        }
      };
    };
    Object.defineProperty(exports, "Iterator", d(ThrobberIterator));
  }
});

// node_modules/cli-color/reset.js
var require_reset = __commonJS({
  "node_modules/cli-color/reset.js"(exports, module) {
    "use strict";
    module.exports = "\x1B[2J\x1B[0;0H";
  }
});

// node_modules/es5-ext/object/valid-object.js
var require_valid_object = __commonJS({
  "node_modules/es5-ext/object/valid-object.js"(exports, module) {
    "use strict";
    var isObject = require_is_object();
    module.exports = function(value) {
      if (!isObject(value))
        throw new TypeError(value + " is not an Object");
      return value;
    };
  }
});

// node_modules/es5-ext/array/#/clear.js
var require_clear = __commonJS({
  "node_modules/es5-ext/array/#/clear.js"(exports, module) {
    "use strict";
    var value = require_valid_value();
    module.exports = function() {
      value(this).length = 0;
      return this;
    };
  }
});

// node_modules/type/plain-function/ensure.js
var require_ensure2 = __commonJS({
  "node_modules/type/plain-function/ensure.js"(exports, module) {
    "use strict";
    var resolveException = require_resolve_exception();
    var is = require_is5();
    module.exports = function(value) {
      if (is(value))
        return value;
      return resolveException(value, "%v is not a plain function", arguments[1]);
    };
  }
});

// node_modules/es5-ext/object/copy.js
var require_copy = __commonJS({
  "node_modules/es5-ext/object/copy.js"(exports, module) {
    "use strict";
    var aFrom = require_from();
    var assign = require_assign();
    var value = require_valid_value();
    module.exports = function(obj) {
      var copy = Object(value(obj)), propertyNames = arguments[1], options = Object(arguments[2]);
      if (copy !== obj && !propertyNames)
        return copy;
      var result = {};
      if (propertyNames) {
        aFrom(propertyNames, function(propertyName) {
          if (options.ensure || propertyName in obj)
            result[propertyName] = obj[propertyName];
        });
      } else {
        assign(result, obj);
      }
      return result;
    };
  }
});

// node_modules/d/auto-bind.js
var require_auto_bind = __commonJS({
  "node_modules/d/auto-bind.js"(exports, module) {
    "use strict";
    var isValue = require_is();
    var ensureValue = require_ensure();
    var ensurePlainFunction = require_ensure2();
    var copy = require_copy();
    var normalizeOptions = require_normalize_options();
    var map = require_map();
    var bind = Function.prototype.bind;
    var defineProperty = Object.defineProperty;
    var hasOwnProperty2 = Object.prototype.hasOwnProperty;
    var define;
    define = function(name, desc, options) {
      var value = ensureValue(desc) && ensurePlainFunction(desc.value), dgs;
      dgs = copy(desc);
      delete dgs.writable;
      delete dgs.value;
      dgs.get = function() {
        if (!options.overwriteDefinition && hasOwnProperty2.call(this, name))
          return value;
        desc.value = bind.call(value, options.resolveContext ? options.resolveContext(this) : this);
        defineProperty(this, name, desc);
        return this[name];
      };
      return dgs;
    };
    module.exports = function(props) {
      var options = normalizeOptions(arguments[1]);
      if (isValue(options.resolveContext))
        ensurePlainFunction(options.resolveContext);
      return map(props, function(desc, name) {
        return define(name, desc, options);
      });
    };
  }
});

// node_modules/es6-iterator/index.js
var require_es6_iterator = __commonJS({
  "node_modules/es6-iterator/index.js"(exports, module) {
    "use strict";
    var clear = require_clear();
    var assign = require_assign();
    var callable = require_valid_callable();
    var value = require_valid_value();
    var d = require_d();
    var autoBind = require_auto_bind();
    var Symbol = require_es6_symbol();
    var defineProperty = Object.defineProperty;
    var defineProperties = Object.defineProperties;
    var Iterator;
    module.exports = Iterator = function(list, context) {
      if (!(this instanceof Iterator))
        throw new TypeError("Constructor requires 'new'");
      defineProperties(this, {
        __list__: d("w", value(list)),
        __context__: d("w", context),
        __nextIndex__: d("w", 0)
      });
      if (!context)
        return;
      callable(context.on);
      context.on("_add", this._onAdd);
      context.on("_delete", this._onDelete);
      context.on("_clear", this._onClear);
    };
    delete Iterator.prototype.constructor;
    defineProperties(
      Iterator.prototype,
      assign(
        {
          _next: d(function() {
            var i;
            if (!this.__list__)
              return void 0;
            if (this.__redo__) {
              i = this.__redo__.shift();
              if (i !== void 0)
                return i;
            }
            if (this.__nextIndex__ < this.__list__.length)
              return this.__nextIndex__++;
            this._unBind();
            return void 0;
          }),
          next: d(function() {
            return this._createResult(this._next());
          }),
          _createResult: d(function(i) {
            if (i === void 0)
              return { done: true, value: void 0 };
            return { done: false, value: this._resolve(i) };
          }),
          _resolve: d(function(i) {
            return this.__list__[i];
          }),
          _unBind: d(function() {
            this.__list__ = null;
            delete this.__redo__;
            if (!this.__context__)
              return;
            this.__context__.off("_add", this._onAdd);
            this.__context__.off("_delete", this._onDelete);
            this.__context__.off("_clear", this._onClear);
            this.__context__ = null;
          }),
          toString: d(function() {
            return "[object " + (this[Symbol.toStringTag] || "Object") + "]";
          })
        },
        autoBind({
          _onAdd: d(function(index) {
            if (index >= this.__nextIndex__)
              return;
            ++this.__nextIndex__;
            if (!this.__redo__) {
              defineProperty(this, "__redo__", d("c", [index]));
              return;
            }
            this.__redo__.forEach(function(redo, i) {
              if (redo >= index)
                this.__redo__[i] = ++redo;
            }, this);
            this.__redo__.push(index);
          }),
          _onDelete: d(function(index) {
            var i;
            if (index >= this.__nextIndex__)
              return;
            --this.__nextIndex__;
            if (!this.__redo__)
              return;
            i = this.__redo__.indexOf(index);
            if (i !== -1)
              this.__redo__.splice(i, 1);
            this.__redo__.forEach(function(redo, j) {
              if (redo > index)
                this.__redo__[j] = --redo;
            }, this);
          }),
          _onClear: d(function() {
            if (this.__redo__)
              clear.call(this.__redo__);
            this.__nextIndex__ = 0;
          })
        })
      )
    );
    defineProperty(
      Iterator.prototype,
      Symbol.iterator,
      d(function() {
        return this;
      })
    );
  }
});

// node_modules/es6-iterator/array.js
var require_array = __commonJS({
  "node_modules/es6-iterator/array.js"(exports, module) {
    "use strict";
    var setPrototypeOf = require_set_prototype_of();
    var contains = require_contains();
    var d = require_d();
    var Symbol = require_es6_symbol();
    var Iterator = require_es6_iterator();
    var defineProperty = Object.defineProperty;
    var ArrayIterator;
    ArrayIterator = module.exports = function(arr, kind) {
      if (!(this instanceof ArrayIterator))
        throw new TypeError("Constructor requires 'new'");
      Iterator.call(this, arr);
      if (!kind)
        kind = "value";
      else if (contains.call(kind, "key+value"))
        kind = "key+value";
      else if (contains.call(kind, "key"))
        kind = "key";
      else
        kind = "value";
      defineProperty(this, "__kind__", d("", kind));
    };
    if (setPrototypeOf)
      setPrototypeOf(ArrayIterator, Iterator);
    delete ArrayIterator.prototype.constructor;
    ArrayIterator.prototype = Object.create(Iterator.prototype, {
      _resolve: d(function(i) {
        if (this.__kind__ === "value")
          return this.__list__[i];
        if (this.__kind__ === "key+value")
          return [i, this.__list__[i]];
        return i;
      })
    });
    defineProperty(ArrayIterator.prototype, Symbol.toStringTag, d("c", "Array Iterator"));
  }
});

// node_modules/es6-iterator/string.js
var require_string = __commonJS({
  "node_modules/es6-iterator/string.js"(exports, module) {
    "use strict";
    var setPrototypeOf = require_set_prototype_of();
    var d = require_d();
    var Symbol = require_es6_symbol();
    var Iterator = require_es6_iterator();
    var defineProperty = Object.defineProperty;
    var StringIterator;
    StringIterator = module.exports = function(str) {
      if (!(this instanceof StringIterator))
        throw new TypeError("Constructor requires 'new'");
      str = String(str);
      Iterator.call(this, str);
      defineProperty(this, "__length__", d("", str.length));
    };
    if (setPrototypeOf)
      setPrototypeOf(StringIterator, Iterator);
    delete StringIterator.prototype.constructor;
    StringIterator.prototype = Object.create(Iterator.prototype, {
      _next: d(function() {
        if (!this.__list__)
          return void 0;
        if (this.__nextIndex__ < this.__length__)
          return this.__nextIndex__++;
        this._unBind();
        return void 0;
      }),
      _resolve: d(function(i) {
        var char = this.__list__[i], code;
        if (this.__nextIndex__ === this.__length__)
          return char;
        code = char.charCodeAt(0);
        if (code >= 55296 && code <= 56319)
          return char + this.__list__[this.__nextIndex__++];
        return char;
      })
    });
    defineProperty(StringIterator.prototype, Symbol.toStringTag, d("c", "String Iterator"));
  }
});

// node_modules/es6-iterator/is-iterable.js
var require_is_iterable = __commonJS({
  "node_modules/es6-iterator/is-iterable.js"(exports, module) {
    "use strict";
    var isArguments = require_is_arguments();
    var isValue = require_is_value();
    var isString = require_is_string();
    var iteratorSymbol = require_es6_symbol().iterator;
    var isArray = Array.isArray;
    module.exports = function(value) {
      if (!isValue(value))
        return false;
      if (isArray(value))
        return true;
      if (isString(value))
        return true;
      if (isArguments(value))
        return true;
      return typeof value[iteratorSymbol] === "function";
    };
  }
});

// node_modules/es6-iterator/valid-iterable.js
var require_valid_iterable = __commonJS({
  "node_modules/es6-iterator/valid-iterable.js"(exports, module) {
    "use strict";
    var isIterable = require_is_iterable();
    module.exports = function(value) {
      if (!isIterable(value))
        throw new TypeError(value + " is not iterable");
      return value;
    };
  }
});

// node_modules/es6-iterator/get.js
var require_get2 = __commonJS({
  "node_modules/es6-iterator/get.js"(exports, module) {
    "use strict";
    var isArguments = require_is_arguments();
    var isString = require_is_string();
    var ArrayIterator = require_array();
    var StringIterator = require_string();
    var iterable = require_valid_iterable();
    var iteratorSymbol = require_es6_symbol().iterator;
    module.exports = function(obj) {
      if (typeof iterable(obj)[iteratorSymbol] === "function")
        return obj[iteratorSymbol]();
      if (isArguments(obj))
        return new ArrayIterator(obj);
      if (isString(obj))
        return new StringIterator(obj);
      return new ArrayIterator(obj);
    };
  }
});

// node_modules/es6-iterator/for-of.js
var require_for_of = __commonJS({
  "node_modules/es6-iterator/for-of.js"(exports, module) {
    "use strict";
    var isArguments = require_is_arguments();
    var callable = require_valid_callable();
    var isString = require_is_string();
    var get = require_get2();
    var isArray = Array.isArray;
    var call = Function.prototype.call;
    var some = Array.prototype.some;
    module.exports = function(iterable, cb) {
      var mode, thisArg = arguments[2], result, doBreak, broken, i, length, char, code;
      if (isArray(iterable) || isArguments(iterable))
        mode = "array";
      else if (isString(iterable))
        mode = "string";
      else
        iterable = get(iterable);
      callable(cb);
      doBreak = function() {
        broken = true;
      };
      if (mode === "array") {
        some.call(iterable, function(value) {
          call.call(cb, thisArg, value, doBreak);
          return broken;
        });
        return;
      }
      if (mode === "string") {
        length = iterable.length;
        for (i = 0; i < length; ++i) {
          char = iterable[i];
          if (i + 1 < length) {
            code = char.charCodeAt(0);
            if (code >= 55296 && code <= 56319)
              char += iterable[++i];
          }
          call.call(cb, thisArg, char, doBreak);
          if (broken)
            break;
        }
        return;
      }
      result = iterable.next();
      while (!result.done) {
        call.call(cb, thisArg, result.value, doBreak);
        if (broken)
          return;
        result = iterable.next();
      }
    };
  }
});

// node_modules/cli-color/art.js
var require_art = __commonJS({
  "node_modules/cli-color/art.js"(exports, module) {
    "use strict";
    var object = require_valid_object();
    var stringifiable = require_validate_stringifiable_value();
    var forOf = require_for_of();
    module.exports = function(text, style) {
      var result = "";
      text = stringifiable(text);
      object(style);
      forOf(text, function(char) {
        result += style[char] || char;
      });
      return result;
    };
  }
});

// node_modules/cli-color/index.js
var require_cli_color = __commonJS({
  "node_modules/cli-color/index.js"(exports, module) {
    "use strict";
    var d = require_d();
    module.exports = Object.defineProperties(require_bare(), {
      windowSize: d(require_window_size()),
      erase: d(require_erase()),
      move: d(require_move()),
      beep: d(require_beep()),
      columns: d(require_columns()),
      strip: d(require_strip()),
      getStrippedLength: d(require_get_stripped_length()),
      slice: d(require_slice()),
      throbber: d(require_throbber()),
      reset: d(require_reset()),
      art: d(require_art())
    });
  }
});

// dep:lucia-sveltekit___cli-color
var lucia_sveltekit_cli_color_default = require_cli_color();
export {
  lucia_sveltekit_cli_color_default as default
};
//# sourceMappingURL=lucia-sveltekit___cli-color.js.map
