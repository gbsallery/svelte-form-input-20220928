import type { Context } from "../auth/index.js";
import type { Env, User } from "../types.js";
declare class Token {
    value: string;
    private secret;
    createCookie: () => string;
    constructor(value: string | null, secret: string, cookieOptions: {
        name: string;
        path: string;
        max_age: number;
        secure: boolean;
    });
}
export declare class AccessToken extends Token {
    constructor(value: string | null, context: Context);
    user: (fingerprintToken: string) => Promise<User>;
}
export declare class FingerprintToken extends Token {
    constructor(value: string | null, context: Context);
}
export declare class RefreshToken extends Token {
    constructor(value: string | null, context: Context);
    private context;
    private encrypter;
    encrypt: () => EncryptedRefreshToken;
    userId: (fingerprint: string) => Promise<string>;
}
export declare class EncryptedRefreshToken extends Token {
    constructor(value: string | null, context: Context);
    private context;
    private encrypter;
    decrypt: () => RefreshToken;
}
export declare const createBlankCookies: (env: Env) => string[];
export {};
