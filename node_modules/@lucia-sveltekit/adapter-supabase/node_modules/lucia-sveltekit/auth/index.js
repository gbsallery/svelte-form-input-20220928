import { generateRandomString } from "../utils/crypto.js";
import { handleAuthRequestsFunction, handleDevWarningsFunction, } from "./hooks.js";
import { authenticateUserFunction, createUserFunction, deleteUserFunction, getUserFunction, } from "./user/index.js";
import { validateRequestByCookieFunction, validateRequestFunction, } from "./request.js";
import { refreshTokensFunction } from "./refresh-token/index.js";
import { invalidateRefreshTokenFunction } from "./refresh-token/invalidate.js";
import { createUserSessionFunction } from "./session.js";
import { updateUserDataFunction } from "./user/update/user-data.js";
import { updateUserIdentifierTokenFunction } from "./user/update/identifier-token.js";
import { resetUserPasswordFunction } from "./user/reset-password.js";
import { getUserByIdFunction } from "./user/get.js";
import { AccessToken } from "../utils/token.js";
import { loadFunction } from "./load.js";
import chalk from "chalk";
export const lucia = (configs) => {
    return new Auth(configs);
};
export class Auth {
    constructor(configs) {
        this.validateAccessToken = async (accessToken, fingerprintToken) => {
            const accessTokenInstance = new AccessToken(accessToken, this.context);
            return await accessTokenInstance.user(fingerprintToken);
        };
        /** @deprecated */
        this.getAuthSession = async () => {
            console.log(`${chalk.red.bold("[LUCIA_Error]")} ${chalk.red(".getAuthSession() is replaced by .load() in v0.7.1 . Check the documentation for details.")}`);
        };
        this.adapter = configs.adapter;
        this.secret = configs.secret;
        this.generateUserId =
            configs.generateUserId || (() => generateRandomString(8));
        this.env = configs.env;
        this.context = {
            auth: this,
            adapter: this.adapter,
            secret: this.secret,
            generateUserId: this.generateUserId,
            env: this.env,
        };
        this.authenticateUser = authenticateUserFunction(this.context);
        this.createUser = createUserFunction(this.context);
        this.getUser = getUserFunction(this.context);
        this.getUserById = getUserByIdFunction(this.context);
        this.deleteUser = deleteUserFunction(this.context);
        this.validateRequest = validateRequestFunction(this.context);
        this.validateRequestByCookie = validateRequestByCookieFunction(this.context);
        this.refreshTokens = refreshTokensFunction(this.context);
        this.invalidateRefreshToken = invalidateRefreshTokenFunction(this.context);
        this.createUserSession = createUserSessionFunction(this.context);
        this.updateUserData = updateUserDataFunction(this.context);
        this.updateUserIdentifierToken = updateUserIdentifierTokenFunction(this.context);
        this.resetUserPassword = resetUserPasswordFunction(this.context);
        this.load = loadFunction(this.context);
        const handleDevWarnings = handleDevWarningsFunction(this.context);
        const handleAuthRequests = handleAuthRequestsFunction(this.context);
        this.handleAuth = async (event) => {
            handleDevWarnings(event);
            return await handleAuthRequests(event);
        };
    }
}
