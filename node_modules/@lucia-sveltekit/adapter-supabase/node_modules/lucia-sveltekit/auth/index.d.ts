import type { Handle, ServerLoad } from "../kit.js";
import type { Adapter, Env } from "../types.js";
import { authenticateUserFunction, createUserFunction, deleteUserFunction, getUserFunction } from "./user/index.js";
import { validateRequestByCookieFunction, validateRequestFunction } from "./request.js";
import { refreshTokensFunction } from "./refresh-token/index.js";
import { invalidateRefreshTokenFunction } from "./refresh-token/invalidate.js";
import { createUserSessionFunction } from "./session.js";
import { updateUserDataFunction } from "./user/update/user-data.js";
import { updateUserIdentifierTokenFunction } from "./user/update/identifier-token.js";
import { resetUserPasswordFunction } from "./user/reset-password.js";
import { getUserByIdFunction } from "./user/get.js";
import { loadFunction } from "./load.js";
export declare const lucia: (configs: Configurations) => Omit<Auth, "getAuthSession">;
export declare class Auth {
    private adapter;
    private secret;
    private generateUserId;
    private context;
    private env;
    constructor(configs: Configurations);
    handleAuth: Handle;
    authenticateUser: ReturnType<typeof authenticateUserFunction>;
    createUser: ReturnType<typeof createUserFunction>;
    getUser: ReturnType<typeof getUserFunction>;
    getUserById: ReturnType<typeof getUserByIdFunction>;
    deleteUser: ReturnType<typeof deleteUserFunction>;
    validateRequest: ReturnType<typeof validateRequestFunction>;
    validateRequestByCookie: ReturnType<typeof validateRequestByCookieFunction>;
    refreshTokens: ReturnType<typeof refreshTokensFunction>;
    invalidateRefreshToken: ReturnType<typeof invalidateRefreshTokenFunction>;
    createUserSession: ReturnType<typeof createUserSessionFunction>;
    updateUserData: ReturnType<typeof updateUserDataFunction>;
    updateUserIdentifierToken: ReturnType<typeof updateUserIdentifierTokenFunction>;
    resetUserPassword: ReturnType<typeof resetUserPasswordFunction>;
    load: ReturnType<typeof loadFunction>;
    validateAccessToken: (accessToken: string, fingerprintToken: string) => Promise<import("../types.js").User>;
    /** @deprecated */
    getAuthSession: ServerLoad;
}
interface Configurations {
    adapter: Adapter;
    secret: string;
    env: Env;
    generateUserId?: () => string;
}
export interface Context {
    auth: Auth;
    adapter: Adapter;
    secret: string;
    env: Env;
    generateUserId: () => string;
}
export {};
