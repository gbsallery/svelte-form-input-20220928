import jwt from "jsonwebtoken";
import { generateRandomString, hash } from "./crypto.js";
import { AccessToken, FingerprintToken, RefreshToken } from "./token.js";
export const createAccessToken = async (user, fingerprintToken, context) => {
    const hashedFingerprint = await hash(fingerprintToken);
    const value = jwt.sign({
        ...user,
        fingerprint_hash: hashedFingerprint,
        role: "access_token",
    }, context.secret, {
        expiresIn: 15 * 60,
    });
    return new AccessToken(value, context);
};
export const createRefreshToken = async (userId, fingerprintToken, context) => {
    const hashedFingerprint = await hash(fingerprintToken);
    const value = jwt.sign({
        user_id: userId,
        fingerprint_hash: hashedFingerprint,
        role: "refresh_token",
    }, context.secret, {
        expiresIn: 60 * 60 * 24 * 365, //1 year
    });
    return new RefreshToken(value, context);
};
export const createFingerprintToken = (context) => {
    const value = generateRandomString(64);
    return new FingerprintToken(value, context);
};
export const getAccountFromDatabaseData = (databaseData) => {
    const userId = databaseData.id;
    const hashedPassword = databaseData.hashed_password;
    const identifierToken = databaseData.identifier_token;
    const userData = databaseData;
    delete userData.hashed_password;
    delete userData.identifier_token;
    delete userData.id;
    const user = {
        user_id: userId,
        ...userData,
    };
    return {
        user,
        hashed_password: hashedPassword,
        identifier_token: identifierToken,
    };
};
